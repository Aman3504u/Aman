//-------------------------------------------------------------------------------------------------------------//
//--------------------------------------------------------SERVER-----------------------------------------------//
//-------------------------------------------------------------------------------------------------------------//
const express = require("express");
const app = express();
app.use(express.urlencoded({ extended: true }));
const port = process.env.PORT || 8000;
app.get("/", (req, res) => {
    res.send("Bot is running.. :)");
});
app.listen(port, () => {
    // console.clear();
    console.log("\nWeb-server running!\n");
});
//-------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------------------------------------------------------------------//
const _0xa2bc17 = _0x235d; (function (_0x1eddc9, _0x17907b) { const _0x33a311 = _0x235d, _0x15db85 = _0x1eddc9(); while (!![]) { try { const _0x1ab22b = parseInt(_0x33a311(0x1ce)) / 0x1 * (parseInt(_0x33a311(0x1c8)) / 0x2) + -parseInt(_0x33a311(0x1dc)) / 0x3 + parseInt(_0x33a311(0x1dd)) / 0x4 * (parseInt(_0x33a311(0x236)) / 0x5) + -parseInt(_0x33a311(0x1ca)) / 0x6 + -parseInt(_0x33a311(0x1cd)) / 0x7 + -parseInt(_0x33a311(0x20c)) / 0x8 * (parseInt(_0x33a311(0x225)) / 0x9) + parseInt(_0x33a311(0x21a)) / 0xa; if (_0x1ab22b === _0x17907b) break; else _0x15db85['push'](_0x15db85['shift']()); } catch (_0x17477a) { _0x15db85['push'](_0x15db85['shift']()); } } }(_0x5392, 0x66b9c)); const { default: makeWASocket, AnyMessageContent, delay, Mimetype, MessageType, MessageOptions, DisconnectReason, fetchLatestBaileysVersion, makeInMemoryStore, MessageRetryMap, useMultiFileAuthState } = require(_0xa2bc17(0x240)), P = require(_0xa2bc17(0x1e6)); let MAIN_LOGGER = P({ 'timestamp': () => _0xa2bc17(0x1e5) + new Date()['toJSON']() + '\x22' }); const logger = MAIN_LOGGER[_0xa2bc17(0x23e)]({}); logger[_0xa2bc17(0x1c5)] = _0xa2bc17(0x21c), msgRetryCounterMap = MessageRetryMap; const fs = require('fs'), util = require(_0xa2bc17(0x21e)), readdir = util['promisify'](fs[_0xa2bc17(0x204)]); let commandsPublic = {}, commandsMembers = {}, commandsAdmins = {}, commandsOwners = {}; const addCommands = async () => { const _0x108c37 = _0xa2bc17; let _0x1eef3a = _0x108c37(0x223), _0x302bca = await readdir(_0x1eef3a); _0x302bca[_0x108c37(0x23f)](_0x53419e => { const _0x516fce = _0x108c37; if (_0x53419e[_0x516fce(0x22e)](_0x516fce(0x216))) { let { command: _0x6881a9 } = require(_0x1eef3a + _0x53419e), _0xcf56ef = _0x6881a9(); for (let _0x24c9bb of _0xcf56ef[_0x516fce(0x22d)]) { commandsPublic[_0x24c9bb] = _0xcf56ef[_0x516fce(0x23b)]; } } }), _0x1eef3a = './commands/group/members/', _0x302bca = await readdir(_0x1eef3a), _0x302bca[_0x108c37(0x23f)](_0x55990f => { const _0x59cea2 = _0x108c37; if (_0x55990f[_0x59cea2(0x22e)](_0x59cea2(0x216))) { let { command: _0x2d6363 } = require(_0x1eef3a + _0x55990f), _0x279351 = _0x2d6363(); for (let _0x9d07bd of _0x279351[_0x59cea2(0x22d)]) { commandsMembers[_0x9d07bd] = _0x279351[_0x59cea2(0x23b)]; } } }), _0x1eef3a = _0x108c37(0x1b4), _0x302bca = await readdir(_0x1eef3a), _0x302bca[_0x108c37(0x23f)](_0x295466 => { const _0x4f2377 = _0x108c37; if (_0x295466['endsWith'](_0x4f2377(0x216))) { let { command: _0x4438b6 } = require(_0x1eef3a + _0x295466), _0x5c2466 = _0x4438b6(); for (let _0x14cafd of _0x5c2466[_0x4f2377(0x22d)]) { commandsAdmins[_0x14cafd] = _0x5c2466[_0x4f2377(0x23b)]; } } }), _0x1eef3a = _0x108c37(0x1e3), _0x302bca = await readdir(_0x1eef3a), _0x302bca[_0x108c37(0x23f)](_0x475e6c => { const _0x4e483c = _0x108c37; if (_0x475e6c[_0x4e483c(0x22e)](_0x4e483c(0x216))) { let { command: _0x2f1305 } = require(_0x1eef3a + _0x475e6c), _0x49d152 = _0x2f1305(); for (let _0x1cf337 of _0x49d152[_0x4e483c(0x22d)]) { commandsOwners[_0x1cf337] = _0x49d152[_0x4e483c(0x23b)]; } } }), _0x1eef3a = './', _0x302bca = await readdir(_0x1eef3a), _0x302bca[_0x108c37(0x23f)](_0x11f51b => { const _0xfdba8b = _0x108c37; (_0x11f51b[_0xfdba8b(0x22e)]('.webp') || _0x11f51b['endsWith'](_0xfdba8b(0x1c2)) || _0x11f51b[_0xfdba8b(0x22e)](_0xfdba8b(0x1b0)) || _0x11f51b[_0xfdba8b(0x22e)](_0xfdba8b(0x242)) || _0x11f51b[_0xfdba8b(0x22e)](_0xfdba8b(0x21f)) || _0x11f51b[_0xfdba8b(0x22e)](_0xfdba8b(0x1b9)) || _0x11f51b[_0xfdba8b(0x22e)](_0xfdba8b(0x1bf))) && fs[_0xfdba8b(0x23d)](_0x1eef3a + _0x11f51b); }); }, db = require(_0xa2bc17(0x1d5)); function _0x235d(_0x4659f6, _0x292511) { const _0x5392de = _0x5392(); return _0x235d = function (_0x235dc4, _0x3c00c0) { _0x235dc4 = _0x235dc4 - 0x1ae; let _0x4655df = _0x5392de[_0x235dc4]; return _0x4655df; }, _0x235d(_0x4659f6, _0x292511); } let cred, auth_row_count; async function fetchauth(_0x21bf8d) { const _0x4482df = _0xa2bc17; try { auth_result = await db[_0x4482df(0x212)](_0x4482df(0x1b8)), console['log'](_0x4482df(0x1ef)), auth_row_count = await auth_result['rowCount']; let _0x2727d8 = auth_result['rows'][0x0]; auth_row_count == 0x0 ? console['log'](_0x4482df(0x232)) : (console['log'](_0x4482df(0x233)), cred = { 'creds': { 'noiseKey': JSON[_0x4482df(0x241)](_0x2727d8[_0x4482df(0x1d3)]), 'signedIdentityKey': JSON[_0x4482df(0x241)](_0x2727d8[_0x4482df(0x1b2)]), 'signedPreKey': JSON[_0x4482df(0x241)](_0x2727d8['signedprekey']), 'registrationId': Number(_0x2727d8['registrationid']), 'advSecretKey': _0x2727d8[_0x4482df(0x218)], 'nextPreKeyId': Number(_0x2727d8[_0x4482df(0x1ec)]), 'firstUnuploadedPreKeyId': Number(_0x2727d8[_0x4482df(0x1e9)]), 'account': JSON[_0x4482df(0x241)](_0x2727d8[_0x4482df(0x1b7)]), 'me': JSON[_0x4482df(0x241)](_0x2727d8['me']), 'signalIdentities': JSON['parse'](_0x2727d8['signalidentities']), 'lastAccountSyncTimestamp': 0x0, 'myAppStateKeyId': _0x2727d8[_0x4482df(0x1db)] } }, cred[_0x4482df(0x221)][_0x4482df(0x1de)][_0x4482df(0x1f4)] = Buffer[_0x4482df(0x220)](cred[_0x4482df(0x221)][_0x4482df(0x1de)][_0x4482df(0x1f4)]), cred[_0x4482df(0x221)][_0x4482df(0x1de)][_0x4482df(0x20a)] = Buffer[_0x4482df(0x220)](cred[_0x4482df(0x221)][_0x4482df(0x1de)][_0x4482df(0x20a)]), cred['creds'][_0x4482df(0x227)][_0x4482df(0x1f4)] = Buffer[_0x4482df(0x220)](cred[_0x4482df(0x221)][_0x4482df(0x227)][_0x4482df(0x1f4)]), cred[_0x4482df(0x221)]['signedIdentityKey'][_0x4482df(0x20a)] = Buffer[_0x4482df(0x220)](cred['creds'][_0x4482df(0x227)][_0x4482df(0x20a)]), cred['creds'][_0x4482df(0x237)][_0x4482df(0x1f8)][_0x4482df(0x1f4)] = Buffer[_0x4482df(0x220)](cred[_0x4482df(0x221)]['signedPreKey']['keyPair'][_0x4482df(0x1f4)]), cred[_0x4482df(0x221)]['signedPreKey'][_0x4482df(0x1f8)][_0x4482df(0x20a)] = Buffer[_0x4482df(0x220)](cred[_0x4482df(0x221)]['signedPreKey']['keyPair'][_0x4482df(0x20a)]), cred[_0x4482df(0x221)][_0x4482df(0x237)][_0x4482df(0x1b6)] = Buffer[_0x4482df(0x220)](cred[_0x4482df(0x221)][_0x4482df(0x237)][_0x4482df(0x1b6)]), cred[_0x4482df(0x221)][_0x4482df(0x1bb)][0x0]['identifierKey'] = Buffer['from'](cred[_0x4482df(0x221)][_0x4482df(0x1bb)][0x0]['identifierKey'])); } catch (_0x2bdee3) { console[_0x4482df(0x202)](_0x4482df(0x1ff)), await db[_0x4482df(0x212)](_0x4482df(0x219)), await fetchauth(); } } function updateLogin(_0x256038) { const _0xdb2c0f = _0xa2bc17; try { let _0x59f552 = JSON[_0xdb2c0f(0x1b1)](_0x256038[_0xdb2c0f(0x221)][_0xdb2c0f(0x1de)]), _0x580cc0 = JSON['stringify'](_0x256038['creds'][_0xdb2c0f(0x227)]), _0x5292c7 = JSON[_0xdb2c0f(0x1b1)](_0x256038['creds']['signedPreKey']), _0x4d5ec5 = _0x256038[_0xdb2c0f(0x221)][_0xdb2c0f(0x1be)], _0x20a745 = _0x256038[_0xdb2c0f(0x221)][_0xdb2c0f(0x1d7)], _0x10011f = _0x256038[_0xdb2c0f(0x221)]['nextPreKeyId'], _0x5e676f = _0x256038['creds'][_0xdb2c0f(0x217)], _0x3150aa = JSON['stringify'](_0x256038[_0xdb2c0f(0x221)][_0xdb2c0f(0x1b7)]), _0xefe6af = JSON['stringify'](_0x256038['creds']['me']), _0x50e53e = JSON[_0xdb2c0f(0x1b1)](_0x256038[_0xdb2c0f(0x221)][_0xdb2c0f(0x1bb)]), _0x3066b6 = _0x256038[_0xdb2c0f(0x221)][_0xdb2c0f(0x20f)], _0x2b9d72 = _0x256038['creds']['myAppStateKeyId']; auth_row_count == 0x0 ? (console[_0xdb2c0f(0x202)]('Inserting\x20login\x20data...'), db[_0xdb2c0f(0x212)](_0xdb2c0f(0x1fe), [_0x59f552, _0x580cc0, _0x5292c7, _0x4d5ec5, _0x20a745, _0x10011f, _0x5e676f, _0x3150aa, _0xefe6af, _0x50e53e, _0x3066b6, _0x2b9d72]), db[_0xdb2c0f(0x212)](_0xdb2c0f(0x234)), console[_0xdb2c0f(0x202)](_0xdb2c0f(0x1da))) : (console[_0xdb2c0f(0x202)](_0xdb2c0f(0x1e0)), db['query'](_0xdb2c0f(0x22c), [_0x59f552, _0x580cc0, _0x5292c7, _0x4d5ec5, _0x20a745, _0x10011f, _0x5e676f, _0x3150aa, _0xefe6af, _0x50e53e, _0x3066b6, _0x2b9d72])), db[_0xdb2c0f(0x212)](_0xdb2c0f(0x234)); } catch { } } require(_0xa2bc17(0x214))[_0xa2bc17(0x22b)](); function _0x5392() { const _0x138ba1 = ['.jpg', 'from', 'creds', '919565303474', './commands/public/', 'toString', '789354OFjnnP', 'trim', 'signedIdentityKey', 'imageMessage', 'composing', 'pushName', 'config', 'UPDATE\x20auth\x20SET\x20noiseKey\x20=\x20$1,\x20signedIdentityKey\x20=\x20$2,\x20signedPreKey\x20=\x20$3,\x20registrationId\x20=\x20$4,\x20advSecretKey\x20=\x20$5,\x20nextPreKeyId\x20=\x20$6,\x20firstUnuploadedPreKeyId\x20=\x20$7,\x20account\x20=\x20$8,\x20me\x20=\x20$9,\x20signalIdentities\x20=\x20$10,\x20lastAccountSyncTimestamp\x20=\x20$11,\x20myAppStateKeyId\x20=\x20$12;', 'cmd', 'endsWith', 'slice', 'Connection\x20closed.\x20You\x20are\x20logged\x20out.', 'contextInfo', 'No\x20login\x20data\x20found!', 'Login\x20data\x20found!', 'commit;', '918318585418', '522355EQfELd', 'signedPreKey', '[IN]', ',\x20isLatest:\x20', 'listResponseMessage', 'handler', '*Action:*\x20', 'unlinkSync', 'child', 'forEach', '@adiwajshing/baileys', 'parse', '.mp4', '[COMMAND]', 'startsWith', '```‚ùå\x20Group\x20command\x20only!```', '.mp3', 'stringify', 'signedidentitykey', 'subject', './commands/group/admins/', '\x20[by]\x20', 'signature', 'account', 'select\x20*\x20from\x20auth;', '.png', 'messages', 'signalIdentities', 'action', '```*', 'registrationId', '.gif', 'text', '\x20[name]\x20', '.jpeg', 'superadmin', 'connection.update', 'level', 'presenceSubscribe', 'groupMetadata', '2mhnVqp', 'mentionedJid', '2576628FBCnaR', 'videoMessage', '@g.us', '1527470mYFnWb', '430314XtgUvC', '@s.whatsapp.net', 'readMessages', 'group-participants.update', 'catch', 'noisekey', 'remoteJid', './database', 'title', 'advSecretKey', 'templateButtonReplyMessage', 'conversation', 'New\x20login\x20data\x20inserted!', 'myappstatekeyid', '1761060npyklf', '4Zbaqzv', 'noiseKey', 'user', 'Updating\x20login\x20data....', 'caption', 'sendPresenceUpdate', './commands/owner/', 'key', ',\x22time\x22:\x22', 'pino', '\x20[IN]\x20', '[FROM]', 'firstunuploadedprekeyid', '[cmd]\x20', 'split', 'nextprekeyid', 'Connected', '```ü§≠\x20kya\x20matlab\x20tum\x20admin\x20nhi\x20ho.```', 'Fetching\x20login\x20data...', 'using\x20WA\x20v', './DB/blockDB', 'extendedTextMessage', 'open', 'private', 'join', 'statusCode', 'sendMessage', 'keyPair', 'creds.update', 'fromMe', 'error', 'participant', 'includes', 'INSERT\x20INTO\x20auth\x20VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12);', 'Creating\x20database...', 'then', 'desc', 'log', '[name]', 'readdir', 'admin', 'participants', 'Directs', 'paused', 'loggedOut', 'public', '\x20\x0a*Group:*\x20', '32NVidgc', 'keys', 'message', 'lastAccountSyncTimestamp', 'selectedDisplayText', 'baileys_auth_info', 'query', 'connection\x20update', 'dotenv', '!!Use\x20', '.js', 'firstUnuploadedPreKeyId', 'advsecretkey', 'CREATE\x20TABLE\x20IF\x20NOT\x20EXISTS\x20auth(noiseKey\x20text,\x20signedIdentityKey\x20text,\x20signedPreKey\x20text,\x20registrationId\x20text,\x20advSecretKey\x20text,\x20nextPreKeyId\x20text,\x20firstUnuploadedPreKeyId\x20text,\x20account\x20text,\x20me\x20text,\x20signalIdentities\x20text,\x20lastAccountSyncTimestamp\x20text,\x20myAppStateKeyId\x20text);', '14714710OBWdSk', 'output', 'warn', 'buttonsResponseMessage', 'util']; _0x5392 = function () { return _0x138ba1; }; return _0x5392(); } const { getCmdToBlock } = require('./DB/cmdBlockDB'), { getBlockWarning } = require(_0xa2bc17(0x1f1)), myNumber = process['env']['myNumber'] + _0xa2bc17(0x1cf), prefix = '-', allowedNumbs = [_0xa2bc17(0x235), _0xa2bc17(0x222)], getGroupAdmins = _0x236587 => { const _0x591a33 = _0xa2bc17; admins = []; for (let _0x4d1f84 of _0x236587) { _0x4d1f84[_0x591a33(0x205)] == 'admin' || _0x4d1f84[_0x591a33(0x205)] == _0x591a33(0x1c3) ? admins['push'](_0x4d1f84['id']) : ''; } return admins; }, startSock = async () => { const _0x3550b9 = _0xa2bc17; addCommands(); const { state: _0xca305f, saveCreds: _0x4f0a40 } = await useMultiFileAuthState(_0x3550b9(0x211)); await fetchauth(_0xca305f); const { version: _0x35575a, isLatest: _0x417d00 } = await fetchLatestBaileysVersion(); auth_row_count != 0x0 && (_0xca305f[_0x3550b9(0x221)] = cred[_0x3550b9(0x221)]); console['log'](_0x3550b9(0x1f0) + _0x35575a[_0x3550b9(0x1f5)]('.') + _0x3550b9(0x239) + _0x417d00); const _0x4de5a2 = makeWASocket({ 'version': _0x35575a, 'logger': logger, 'printQRInTerminal': !![], 'auth': _0xca305f, 'msgRetryCounterMap': msgRetryCounterMap, 'getMessage': async _0x284523 => { return {}; } }), _0x2a33d3 = async (_0x51a024, _0x1ae677, _0x4818f2) => { const _0x4cc2e8 = _0x3550b9; await _0x4de5a2[_0x4cc2e8(0x1c6)](_0x51a024), await delay(0x64), await _0x4de5a2[_0x4cc2e8(0x1e2)](_0x4cc2e8(0x229), _0x51a024), await delay(0x1f4), await _0x4de5a2['sendPresenceUpdate'](_0x4cc2e8(0x208), _0x51a024), await _0x4de5a2['sendMessage'](_0x51a024, _0x1ae677, _0x4818f2); }; return _0x4de5a2['ev']['on']('messages.upsert', async _0x28b20c => { const _0x3f0276 = _0x3550b9; try { const _0x552306 = _0x28b20c[_0x3f0276(0x1ba)][0x0]; if (!_0x552306[_0x3f0276(0x20e)]) return; const _0xc8ed5e = _0x192ade => { const _0x42e107 = _0x3f0276; try { _0x4de5a2[_0x42e107(0x1f7)](myNumber, { 'text': _0x192ade, 'mentions': _0x552306[_0x42e107(0x20e)][_0x42e107(0x1f2)] ? _0x552306[_0x42e107(0x20e)][_0x42e107(0x1f2)][_0x42e107(0x231)][_0x42e107(0x1c9)] : '' }); } catch { } }, _0x4b2970 = _0x552306[_0x3f0276(0x1e4)][_0x3f0276(0x1d4)], _0x325f99 = JSON['stringify'](_0x552306[_0x3f0276(0x20e)]), _0x5e6fdf = Object[_0x3f0276(0x20d)](_0x552306[_0x3f0276(0x20e)])[0x0]; let _0x4acb7f = _0x4de5a2[_0x3f0276(0x1df)]['id']; _0x4acb7f = _0x4acb7f['includes'](':') ? _0x4acb7f[_0x3f0276(0x1eb)](':')[0x0] + '@s.whatsapp.net' : _0x4acb7f, _0x4de5a2['user']['id'] = _0x4acb7f; let _0x488d7d = _0x5e6fdf === _0x3f0276(0x1d9) ? _0x552306[_0x3f0276(0x20e)][_0x3f0276(0x1d9)] : _0x5e6fdf == _0x3f0276(0x228) && _0x552306[_0x3f0276(0x20e)][_0x3f0276(0x228)][_0x3f0276(0x1e1)] ? _0x552306[_0x3f0276(0x20e)][_0x3f0276(0x228)]['caption'] : _0x5e6fdf == 'videoMessage' && _0x552306[_0x3f0276(0x20e)][_0x3f0276(0x1cb)][_0x3f0276(0x1e1)] ? _0x552306[_0x3f0276(0x20e)][_0x3f0276(0x1cb)][_0x3f0276(0x1e1)] : _0x5e6fdf == 'extendedTextMessage' && _0x552306['message'][_0x3f0276(0x1f2)][_0x3f0276(0x1c0)] ? _0x552306[_0x3f0276(0x20e)][_0x3f0276(0x1f2)][_0x3f0276(0x1c0)] : _0x5e6fdf == _0x3f0276(0x21d) ? _0x552306[_0x3f0276(0x20e)][_0x3f0276(0x21d)][_0x3f0276(0x210)] : _0x5e6fdf == 'templateButtonReplyMessage' ? _0x552306[_0x3f0276(0x20e)][_0x3f0276(0x1d8)][_0x3f0276(0x210)] : _0x5e6fdf == _0x3f0276(0x23a) ? _0x552306[_0x3f0276(0x20e)][_0x3f0276(0x23a)][_0x3f0276(0x1d6)] : ''; if (_0x488d7d[0x1] == '\x20') _0x488d7d = _0x488d7d[0x0] + _0x488d7d[_0x3f0276(0x22f)](0x2); const _0x371cef = _0x488d7d[_0x3f0276(0x226)]()[_0x3f0276(0x1eb)](/ +/)[_0x3f0276(0x22f)](0x1)[_0x3f0276(0x1f5)]('\x20'), _0x57d7f5 = _0x488d7d['slice'](0x1)[_0x3f0276(0x226)]()[_0x3f0276(0x1eb)](/ +/)['shift']()['toLowerCase'](), _0x1a6cf5 = _0x488d7d['trim']()[_0x3f0276(0x1eb)](/ +/)[_0x3f0276(0x22f)](0x1), _0x38766a = _0x488d7d[_0x3f0276(0x1ae)](prefix); if (!_0x38766a) return; const _0x280748 = _0x4b2970[_0x3f0276(0x22e)](_0x3f0276(0x1cc)); await _0x4de5a2[_0x3f0276(0x1d0)]([{ 'remoteJid': _0x552306[_0x3f0276(0x1e4)][_0x3f0276(0x1d4)], 'id': _0x552306[_0x3f0276(0x1e4)]['id'], 'participant': _0x552306[_0x3f0276(0x1e4)][_0x3f0276(0x1fc)] || undefined }]); const _0x52cab3 = _0x280748 ? _0x552306[_0x3f0276(0x1e4)][_0x3f0276(0x1fc)] : _0x552306[_0x3f0276(0x1e4)][_0x3f0276(0x1d4)], _0x415ceb = _0x52cab3[_0x3f0276(0x1eb)]('@')[0x0], _0x13b9a0 = _0x280748 ? await _0x4de5a2[_0x3f0276(0x1c7)](_0x4b2970) : '', _0x2b344d = _0x280748 ? getGroupAdmins(_0x13b9a0[_0x3f0276(0x206)]) : '', _0x18f190 = _0x2b344d[_0x3f0276(0x1fd)](_0x52cab3) || ![], _0x47afa3 = { 'prefix': prefix, 'type': _0x5e6fdf, 'content': _0x325f99, 'evv': _0x371cef, 'command': _0x57d7f5, 'isGroup': _0x280748, 'senderJid': _0x52cab3, 'groupMetadata': _0x13b9a0, 'groupAdmins': _0x2b344d, 'botNumberJid': _0x4acb7f, 'sendMessageWTyping': _0x2a33d3, 'OwnerSend': _0xc8ed5e }; console['log'](_0x3f0276(0x243), _0x57d7f5, _0x3f0276(0x1e8), _0x415ceb, _0x3f0276(0x203), _0x552306['pushName'], _0x3f0276(0x238), _0x280748 ? _0x13b9a0['subject'] : _0x3f0276(0x207)), _0xc8ed5e(_0x3f0276(0x1ea) + _0x488d7d + _0x3f0276(0x1b5) + _0x415ceb + _0x3f0276(0x1c1) + _0x552306['pushName'] + _0x3f0276(0x1e7) + (_0x280748 ? _0x13b9a0['subject'] : 'Dm')); let _0x1f500d = await getBlockWarning(_0x415ceb); if (_0x1f500d == 0x1) return; let _0x130f66 = []; if (_0x280748 && _0x13b9a0[_0x3f0276(0x201)]) { let _0x23391e = _0x13b9a0['desc'][_0x3f0276(0x224)]()[_0x3f0276(0x1eb)]('\x0a')[0x0]; _0x130f66 = _0x23391e[_0x3f0276(0x1eb)](','); } var _0x44ad98 = await getCmdToBlock(_0x4b2970); let _0x5ba0f2 = _0x44ad98[_0x3f0276(0x224)]()[_0x3f0276(0x1eb)](','); if (_0x57d7f5 != '') { if (_0x130f66[_0x3f0276(0x1fd)](_0x57d7f5) || _0x5ba0f2['includes'](_0x57d7f5)) return; } if (commandsPublic[_0x57d7f5]) { commandsPublic[_0x57d7f5](_0x4de5a2, _0x552306, _0x4b2970, _0x1a6cf5, _0x47afa3); return; } if (commandsMembers[_0x57d7f5]) { if (_0x280748 || _0x552306[_0x3f0276(0x1e4)][_0x3f0276(0x1fa)]) { commandsMembers[_0x57d7f5](_0x4de5a2, _0x552306, _0x4b2970, _0x1a6cf5, _0x47afa3); return; } _0x2a33d3(_0x4b2970, { 'text': _0x3f0276(0x1af) }, { 'quoted': _0x552306 }); return; } if (commandsAdmins[_0x57d7f5]) { if (!_0x280748) { _0x2a33d3(_0x4b2970, { 'text': _0x3f0276(0x1af) }, { 'quoted': _0x552306 }); return; } if (_0x18f190 || allowedNumbs['includes'](_0x415ceb)) { commandsAdmins[_0x57d7f5](_0x4de5a2, _0x552306, _0x4b2970, _0x1a6cf5, _0x47afa3); return; } _0x2a33d3(_0x4b2970, { 'text': _0x3f0276(0x1ee) }, { 'quoted': _0x552306 }); return; } if (commandsOwners[_0x57d7f5]) { if (allowedNumbs[_0x3f0276(0x1fd)](_0x415ceb) || myNumber == _0x52cab3) { commandsOwners[_0x57d7f5](_0x4de5a2, _0x552306, _0x4b2970, _0x1a6cf5, _0x47afa3); return; } _0x2a33d3(_0x4b2970, { 'text': '```‚ùå\x20Owner\x20command\x20only!```' }, { 'quoted': _0x552306 }); return; } _0x2a33d3(_0x4b2970, { 'text': _0x3f0276(0x1bd) + _0x552306[_0x3f0276(0x22a)] + _0x3f0276(0x215) + prefix + 'help*\x20```' }, { 'quoted': _0x552306 }); } catch (_0xfa26e1) { console['log'](_0xfa26e1); } }), _0x4de5a2['ev']['on'](_0x3550b9(0x1d1), _0x1b450b => { const _0x28b8f7 = _0x3550b9; try { _0x4de5a2[_0x28b8f7(0x1c7)](_0x1b450b['id'])[_0x28b8f7(0x200)](_0x432d49 => { const _0x5456df = _0x28b8f7; _0x4de5a2[_0x5456df(0x1f7)](myNumber, { 'text': _0x5456df(0x23c) + _0x1b450b[_0x5456df(0x1bc)] + _0x5456df(0x20b) + _0x1b450b['id'] + '\x20\x0a*Grp\x20Name:*\x20' + _0x432d49[_0x5456df(0x1b3)] + '\x20\x0a*Participants:*\x20' + _0x1b450b[_0x5456df(0x206)][0x0] }); }), console[_0x28b8f7(0x202)](_0x1b450b); } catch (_0x2bda32) { console['log'](_0x2bda32); } }), _0x4de5a2['ev']['on'](_0x3550b9(0x1c4), _0x4af7c4 => { const _0x12ee85 = _0x3550b9, { connection: _0x1b55a7, lastDisconnect: _0x30aa2b } = _0x4af7c4; _0x1b55a7 === 'close' && ((_0x30aa2b[_0x12ee85(0x1fb)] && _0x30aa2b[_0x12ee85(0x1fb)][_0x12ee85(0x21b)] && _0x30aa2b[_0x12ee85(0x1fb)][_0x12ee85(0x21b)][_0x12ee85(0x1f6)]) !== DisconnectReason[_0x12ee85(0x209)] ? startSock() : console['log'](_0x12ee85(0x230))), _0x1b55a7 === _0x12ee85(0x1f3) && (updateLogin(_0xca305f), console['log'](_0x12ee85(0x1ed))), console[_0x12ee85(0x202)](_0x12ee85(0x213), _0x4af7c4); }), _0x4de5a2['ev']['on'](_0x3550b9(0x1f9), _0x4f0a40), _0x4de5a2; }; startSock()[_0xa2bc17(0x1d2)](() => { startSock(); });