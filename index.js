(function (_0xbd8fb6, _0x58c3a) { function _0x2c0e94(_0x2ce89c, _0x183635) { return _0x3459(_0x2ce89c - -0x29, _0x183635); } const _0x234782 = _0xbd8fb6(); while (!![]) { try { const _0x1f1102 = -parseInt(_0x2c0e94(0xe7, 0x12c)) / 0x1 * (parseInt(_0x2c0e94(0x162, 0x14e)) / 0x2) + -parseInt(_0x2c0e94(0x14e, 0x11d)) / 0x3 * (parseInt(_0x2c0e94(0x12f, 0x167)) / 0x4) + parseInt(_0x2c0e94(0xf5, 0xc3)) / 0x5 + -parseInt(_0x2c0e94(0xfd, 0xba)) / 0x6 * (-parseInt(_0x2c0e94(0x13f, 0x184)) / 0x7) + -parseInt(_0x2c0e94(0x14d, 0x125)) / 0x8 + -parseInt(_0x2c0e94(0x14b, 0x11c)) / 0x9 + -parseInt(_0x2c0e94(0x152, 0x113)) / 0xa * (-parseInt(_0x2c0e94(0x15a, 0x16f)) / 0xb); if (_0x1f1102 === _0x58c3a) break; else _0x234782['push'](_0x234782['shift']()); } catch (_0x3f1e61) { _0x234782['push'](_0x234782['shift']()); } } }(_0x15ad, 0xa0be0)); const express = require('express'), app = express(); app[_0x4102f5(0x5d, 0xa1)](express[_0x4102f5(-0xb, -0x8)]({ 'extended': !![] })); const port = process[_0x4102f5(0x5, -0x19)]['PORT'] || 0x1f40; app['get']('/', (_0x3e08e5, _0x1e3d28) => { _0x1e3d28['send']('Bot\x20is\x20running..\x20:)'); }), app['listen'](port, () => { function _0x12352c(_0x36c9c8, _0x1f4764) { return _0x4102f5(_0x1f4764 - 0x4e2, _0x36c9c8); } console[_0x12352c(0x521, 0x548)](_0x12352c(0x4ec, 0x530)); }); const { default: makeWASocket, delay, DisconnectReason, fetchLatestBaileysVersion, MessageRetryMap, useMultiFileAuthState, makeCacheableSignalKeyStore } = require(_0x4102f5(0x60, 0x83)), P = require(_0x4102f5(0x72, 0x88)); let MAIN_LOGGER = P({ 'timestamp': () => _0x4102f5(0x3d, 0x2c) + new Date()[_0x4102f5(0x23, 0x62)]() + '\x22' }); const logger = MAIN_LOGGER[_0x4102f5(0x6f, 0x95)]({}); logger[_0x4102f5(0x41, 0x58)] = _0x4102f5(0x36, 0x3a), msgRetryCounterMap = MessageRetryMap; const fs = require('fs'), util = require(_0x4102f5(0x26, -0xc)); function _0x4102f5(_0x5da798, _0x1dcb00) { return _0x3459(_0x5da798 - -0x11f, _0x1dcb00); } const readdir = util['promisify'](fs['readdir']); let commandsPublic = {}, commandsMembers = {}, commandsAdmins = {}, commandsOwners = {}; const addCommands = async () => { let _0x53dbc7 = './commands/public/', _0x1679e2 = await readdir(_0x53dbc7); _0x1679e2[_0x1a45de(-0x68, -0x85)](_0x5caef2 => { function _0x2b86b5(_0x248da3, _0x47b821) { return _0x1a45de(_0x47b821, _0x248da3 - 0x23f); } if (_0x5caef2['endsWith'](_0x2b86b5(0x1c1, 0x1ff))) { let { command: _0x15a133 } = require(_0x53dbc7 + _0x5caef2), _0x2a9393 = _0x15a133(); for (let _0x28a628 of _0x2a9393[_0x2b86b5(0x1bf, 0x1b8)]) { commandsPublic[_0x28a628] = _0x2a9393['handler']; } } }), _0x53dbc7 = _0x1a45de(-0x95, -0xb0), _0x1679e2 = await readdir(_0x53dbc7), _0x1679e2[_0x1a45de(-0x43, -0x85)](_0x13e37f => { function _0x10c7b5(_0x137b5f, _0x218425) { return _0x1a45de(_0x218425, _0x137b5f - -0x16d); } if (_0x13e37f[_0x10c7b5(-0x1c0, -0x202)](_0x10c7b5(-0x1eb, -0x1a6))) { let { command: _0x1010d5 } = require(_0x53dbc7 + _0x13e37f), _0x963cd8 = _0x1010d5(); for (let _0x5d4be1 of _0x963cd8[_0x10c7b5(-0x1ed, -0x234)]) { commandsMembers[_0x5d4be1] = _0x963cd8[_0x10c7b5(-0x1ff, -0x236)]; } } }), _0x53dbc7 = './commands/group/admins/', _0x1679e2 = await readdir(_0x53dbc7), _0x1679e2[_0x1a45de(-0xb2, -0x85)](_0x119c02 => { function _0x7adee7(_0x1e0bd6, _0x574743) { return _0x1a45de(_0x1e0bd6, _0x574743 - -0x1e1); } if (_0x119c02[_0x7adee7(-0x21d, -0x234)](_0x7adee7(-0x23a, -0x25f))) { let { command: _0x2f394c } = require(_0x53dbc7 + _0x119c02), _0x40f749 = _0x2f394c(); for (let _0x211269 of _0x40f749[_0x7adee7(-0x273, -0x261)]) { commandsAdmins[_0x211269] = _0x40f749[_0x7adee7(-0x2a6, -0x273)]; } } }), _0x53dbc7 = './commands/owner/'; function _0x1a45de(_0x47c8d7, _0x2fae5a) { return _0x4102f5(_0x2fae5a - -0xa7, _0x47c8d7); } _0x1679e2 = await readdir(_0x53dbc7), _0x1679e2['forEach'](_0x2a1e90 => { function _0x21aa66(_0x11cacc, _0x501bc2) { return _0x1a45de(_0x11cacc, _0x501bc2 - -0x66); } if (_0x2a1e90[_0x21aa66(-0xde, -0xb9)](_0x21aa66(-0xe9, -0xe4))) { let { command: _0x585790 } = require(_0x53dbc7 + _0x2a1e90), _0x9450be = _0x585790(); for (let _0x3ffa99 of _0x9450be[_0x21aa66(-0xa4, -0xe6)]) { commandsOwners[_0x3ffa99] = _0x9450be[_0x21aa66(-0xbd, -0xf8)]; } } }), _0x53dbc7 = './', _0x1679e2 = await readdir(_0x53dbc7), _0x1679e2[_0x1a45de(-0xad, -0x85)](_0x359657 => { function _0x52a9f8(_0x4b1396, _0x73c7b3) { return _0x1a45de(_0x73c7b3, _0x4b1396 - -0x213); } (_0x359657[_0x52a9f8(-0x266, -0x29b)](_0x52a9f8(-0x2a2, -0x2ca)) || _0x359657[_0x52a9f8(-0x266, -0x236)]('.jpeg') || _0x359657[_0x52a9f8(-0x266, -0x238)]('.mp3') || _0x359657[_0x52a9f8(-0x266, -0x23e)](_0x52a9f8(-0x264, -0x24c)) || _0x359657[_0x52a9f8(-0x266, -0x284)](_0x52a9f8(-0x2cf, -0x2eb)) || _0x359657[_0x52a9f8(-0x266, -0x22a)]('.png') || _0x359657[_0x52a9f8(-0x266, -0x291)]('.gif')) && fs[_0x52a9f8(-0x286, -0x2ab)](_0x53dbc7 + _0x359657); }); }, mdClient = require(_0x4102f5(0x5e, 0x78)); mdClient[_0x4102f5(0x2, 0x1a)](); let sessionCount = 0x1; function fetchauth() { function _0x5745a3(_0x534ac8, _0x7e83bf) { return _0x4102f5(_0x7e83bf - 0xec, _0x534ac8); } try { !fs['existsSync'](_0x5745a3(0x16a, 0x14d)) && fs['mkdirSync']('./baileys_auth_info'), mdClient[_0x5745a3(0x108, 0xee)](async _0x837b78 => { if (_0x837b78) throw _0x837b78; let _0x5a8972 = mdClient['db'](_0x4aaa87(-0x2f, -0x5e))['collection'](_0x4aaa87(-0x5b, -0x3e)); await _0x5a8972['findOne']({ '_id': _0x4aaa87(-0x44, -0x57) })[_0x4aaa87(-0xc, -0x36)](_0x11f9b9 => { function _0x43759e(_0x315933, _0x30d8c4) { return _0x4aaa87(_0x30d8c4, _0x315933 - 0x415); } _0x11f9b9 == null && _0x5a8972[_0x43759e(0x3d3, 0x400)]({ '_id': _0x43759e(0x3be, 0x37d), 'sessionAuth': '' }); }); function _0x4aaa87(_0x43da13, _0x27dc81) { return _0x5745a3(_0x43da13, _0x27dc81 - -0x140); } _0x5a8972[_0x4aaa87(0x16, 0x1a)]({ '_id': _0x4aaa87(-0x97, -0x57) })[_0x4aaa87(-0x2f, -0x22)](function (_0x520fd0, _0x251105) { if (_0x520fd0) throw _0x520fd0; function _0x4f1a72(_0x6ee98f, _0xf6a24c) { return _0x4aaa87(_0xf6a24c, _0x6ee98f - 0x34); } let _0x421e2c = _0x251105[0x0]['sessionAuth']; if (_0x421e2c != '') { _0x421e2c = JSON[_0x4f1a72(0x23, 0x34)](_0x421e2c), _0x421e2c = JSON[_0x4f1a72(0x1b, 0x43)](_0x421e2c); if (sessionCount == 0x1) fs[_0x4f1a72(0x0, -0x3d)](_0x4f1a72(-0xf, 0x2f), _0x421e2c); else sessionCount == 0x0 ? fs[_0x4f1a72(-0x1, -0x3)](_0x4f1a72(-0xf, 0x11), { 'recursive': !![], 'force': !![] }) : console[_0x4f1a72(0x46, 0x1a)](_0x4f1a72(-0x1d, 0x11)); } else console[_0x4f1a72(0x46, 0x73)]('Session\x20Auth\x20Empty'); }); }), console[_0x5745a3(0x170, 0x152)](_0x5745a3(0x169, 0x14e)); } catch (_0x28860c) { console[_0x5745a3(0x18c, 0x154)](_0x5745a3(0x125, 0x117), _0x28860c); } } async function updateLogin() { function _0x133832(_0x20f079, _0x373adb) { return _0x4102f5(_0x373adb - -0x2aa, _0x20f079); } let _0x39855d = mdClient['db'](_0x133832(-0x2e8, -0x2b4))[_0x133832(-0x29e, -0x2b2)](_0x133832(-0x29f, -0x294)); try { let _0x5b7d1a = fs['readFileSync'](_0x133832(-0x2a5, -0x299)); _0x5b7d1a = JSON[_0x133832(-0x268, -0x267)](_0x5b7d1a), _0x5b7d1a = JSON[_0x133832(-0x22d, -0x26f)](_0x5b7d1a), _0x39855d[_0x133832(-0x2dc, -0x2a0)]({ '_id': _0x133832(-0x2d7, -0x2ad) }, { '$set': { 'sessionAuth': _0x5b7d1a } }); } catch (_0x589c17) { console[_0x133832(-0x248, -0x244)](_0x133832(-0x2a7, -0x2a9), _0x589c17); } } require(_0x4102f5(0x2a, -0x1f))[_0x4102f5(-0x11, 0x2)](); const { createMembersData, getMemberData, member } = require('./mongo-DB/membersDataDb'), { createGroupData, getGroupData, group } = require(_0x4102f5(0x9, -0x2c)), myNumber = process[_0x4102f5(0x5, 0x42)]['myNumber'] + _0x4102f5(0x17, 0x9), INSTA_API_KEY = process[_0x4102f5(0x5, -0x1e)][_0x4102f5(0x67, 0x83)], { igApi, getSessionId } = require(_0x4102f5(-0x6, -0x35)), { Collection } = require(_0x4102f5(0xf, -0x3a)); function _0x15ad() { const _0x26f3a2 = ['env', 'botNumber', '11334acFjKS', 'subject', './mongo-DB/groupDataDb', 'updateOne', 'includes', 'sendMessage', '\x20[IN]\x20', 'sessionCount\x20logout\x20time', 'mongodb', 'loggedOut', 'baileys_auth_info/creds.json', 'insertOne', 'isBotOn', 'action', 'handler', 'AuthTable', '@s.whatsapp.net', '.webp', 'conversation', 'Connection\x20closed.\x20You\x20are\x20logged\x20out.', 'using\x20WA\x20v', '[name]', 'remoteJid', 'then', 'rmSync', 'writeFileSync', 'title', 'forEach', 'toJSON', 'buttonsResponseMessage', 'baileys_auth_info', 'util', 'cmd', 'pushName', '.js', 'dotenv', 'Local\x20file\x20writing\x20errors\x20:', '\x20\x0a*Group:*\x20', 'close', 'PREFIX', 'Directs', 'startsWith', 'keys', 'toArray', 'participant', 'unlinkSync', '[COMMAND]', 'warn', 'split', '@g.us', '392552fBqDJu', 'groupMetadata', 'stringify', '```ü§≠\x20kya\x20matlab\x20tum\x20admin\x20nhi\x20ho.```', ',\x22time\x22:\x22', 'messages.upsert', 'process', '```By\x20Default\x20Bot\x20is\x20Not\x20active\x20in\x20this\x20group.\x0aAsk\x20the\x20Owner\x20to\x20activate.```üòçüëå', 'level', 'mentionedJid', 'parse', 'remove', 'presenceSubscribe', 'videoMessage', 'add', 'statusCode', '3227qbJtrq', 'help*\x20```', 'admin', 'is91Only', '```ü§≠\x20kya\x20matlab\x20tum\x20mere\x20owner\x20nhi\x20ho.```', '\x0aWeb-server\x20running!\x0a', 'connection\x20update', 'imageMessage', 'slice', 'message', 'sendPresenceUpdate', 'endsWith', '2254590dpqiEy', '.mp4', '6056792iicpts', '12DiAJfM', '```*', 'isBlock', './baileys_auth_info/', '230GdQEJz', 'use', './mongodb', 'trim', '@adiwajshing/baileys', './baileys_auth_info', 'Local\x20file\x20written', 'matchedCount', '693957nBojGk', '!!Use\x20', 'log', 'INSTA_API_KEY', 'error', 'connection.update', 'selectedDisplayText', 'setCookie', '2nPSgYL', 'group-participants.update', 'find', 'child', 'toLowerCase', '918318585418', 'pino', 'myNumber', 'toString', 'key', 'cmdBlocked', '```‚ùå\x20Group\x20command\x20only!```', '\x20\x0a*Participants:*\x20', 'templateButtonReplyMessage', 'extendedTextMessage', 'creds.update', 'participants', 'caption', '.jpg', 'User\x20Blocked\x20:\x20', 'fromMe', 'name', 'config', '[cmd]\x20', '1209626CSOPyE', '\x20[by]\x20', 'listResponseMessage', 'output', 'urlencoded', 'MyBotDataDB', './commands/group/members/', 'collection', 'join', 'insta-fetcher', '[IN]', 'groupParticipantsUpdate', 'auth', '\x20\x0a*Grp\x20Name:*\x20', '4731785IZKEjn', 'superadmin', 'Db\x20updating\x20error\x20:\x20', 'connect', 'Creds\x20Already\x20there.', 'messages']; _0x15ad = function () { return _0x26f3a2; }; return _0x15ad(); } let ig = new igApi(INSTA_API_KEY); ig[_0x4102f5(0x6b, 0x32)](INSTA_API_KEY); function _0x3459(_0x5157eb, _0x19eaf1) { const _0x15adfa = _0x15ad(); return _0x3459 = function (_0x34595b, _0x22a41a) { _0x34595b = _0x34595b - 0xff; let _0x4b23a8 = _0x15adfa[_0x34595b]; return _0x4b23a8; }, _0x3459(_0x5157eb, _0x19eaf1); } const prefix = '' + process[_0x4102f5(0x5, 0x36)][_0x4102f5(0x2e, 0x5d)] || '-', allowedNumbs = [_0x4102f5(0x71, 0x58), '' + process[_0x4102f5(0x5, 0x2)][_0x4102f5(-0x20, -0x41)], '' + process[_0x4102f5(0x5, 0x2)][_0x4102f5(0x6, 0x48)]], getGroupAdmins = _0x1ac990 => { admins = []; function _0x18748f(_0x36944a, _0x32f6a8) { return _0x4102f5(_0x32f6a8 - 0x49, _0x36944a); } for (let _0x3b8301 of _0x1ac990) { _0x3b8301[_0x18748f(0x5b, 0x94)] == _0x18748f(0x82, 0x94) || _0x3b8301['admin'] == _0x18748f(0x1, 0x49) ? admins['push'](_0x3b8301['id']) : ''; } return admins; }, startSock = async () => { addCommands(), fetchauth(), await delay(0x2710); let _0x3d914a = setInterval(() => { updateLogin(); }, 0x7530); const { state: _0x325637, saveCreds: _0x3c6eac } = await useMultiFileAuthState(_0x247fb3(0x391, 0x39b)), { version: _0x53bc83, isLatest: _0x3b731b } = await fetchLatestBaileysVersion(); console['log'](_0x247fb3(0x3c5, 0x391) + _0x53bc83[_0x247fb3(0x333, 0x36f)]('.') + ',\x20isLatest:\x20' + _0x3b731b); const _0x2b4068 = makeWASocket({ 'version': _0x53bc83, 'logger': logger, 'printQRInTerminal': !![], 'auth': { 'creds': _0x325637['creds'], 'keys': makeCacheableSignalKeyStore(_0x325637['keys'], logger) }, 'msgRetryCounterMap': msgRetryCounterMap, 'generateHighQualityLinkPreview': !![], 'getMessage': async _0xb27e57 => { return {}; } }); sessionCount = 0x2; function _0x247fb3(_0x1dcceb, _0x577e4e) { return _0x4102f5(_0x577e4e - 0x376, _0x1dcceb); } const _0x5309f6 = async (_0x1083da, _0x3bd98a, _0x8a9266) => { await _0x2b4068[_0x5213c5(0x50, 0x44)](_0x1083da), await delay(0x64), await _0x2b4068[_0x5213c5(0x5e, 0x5b)]('composing', _0x1083da); function _0x5213c5(_0x2dd918, _0x3d131d) { return _0x247fb3(_0x3d131d, _0x2dd918 - -0x36b); } await delay(0x1f4), await _0x2b4068[_0x5213c5(0x5e, 0x7b)]('paused', _0x1083da), await _0x2b4068[_0x5213c5(0x17, 0x2)](_0x1083da, _0x3bd98a, _0x8a9266); }; return _0x2b4068['ev'][_0x247fb3(0x3e5, 0x3b5)](async _0x3f3e3d => { if (_0x3f3e3d[_0x12ca74(0x24e, 0x22e)]) { const _0x4b3760 = _0x3f3e3d[_0x12ca74(0x24e, 0x293)], { connection: _0x3afc76, lastDisconnect: _0x5f1b1e } = _0x4b3760; if (_0x3afc76 === _0x12ca74(0x212, 0x217)) { if (_0x5f1b1e[_0x12ca74(0x24d, 0x253)][_0x12ca74(0x1d9, 0x1e2)][_0x12ca74(0x22d, 0x269)] == DisconnectReason[_0x12ca74(0x1f5, 0x1d4)]) { try { path = _0x12ca74(0x240, 0x20d), filenames = await readdir(path), filenames['forEach'](_0xfa6e08 => { function _0x20b5d6(_0x46506c, _0x13327e) { return _0x12ca74(_0x46506c - -0x16a, _0x13327e); } fs[_0x20b5d6(0xaf, 0xb5)](path + _0xfa6e08); }); } catch { } sessionCount = 0x0, console[_0x12ca74(0x24b, 0x21a)](_0x12ca74(0x1f3, 0x1da), sessionCount), clearInterval(_0x3d914a), startSock(); } else console[_0x12ca74(0x24b, 0x245)](_0x12ca74(0x1ff, 0x243), sessionCount), startSock(); } console[_0x12ca74(0x24b, 0x228)](_0x12ca74(0x234, 0x27b), _0x4b3760); } _0x3f3e3d[_0x12ca74(0x1cd, 0x1bf)] && await _0x3c6eac(); function _0x12ca74(_0x1c2c02, _0x5d9521) { return _0x247fb3(_0x5d9521, _0x1c2c02 - -0x191); } if (_0x3f3e3d[_0x12ca74(0x223, 0x219)]) { const _0x4a2b1f = _0x3f3e3d[_0x12ca74(0x223, 0x218)]; try { const _0x2d53a8 = _0x4a2b1f[_0x12ca74(0x1e9, 0x1f3)][0x0]; if (!_0x2d53a8[_0x12ca74(0x237, 0x265)]) return; const _0x148039 = _0x157d50 => { function _0x17f16b(_0x281227, _0xf8ae0c) { return _0x12ca74(_0xf8ae0c - 0x198, _0x281227); } try { _0x2b4068[_0x17f16b(0x34c, 0x389)](myNumber, { 'text': _0x157d50, 'mentions': _0x2d53a8['message'][_0x17f16b(0x3a6, 0x364)] ? _0x2d53a8[_0x17f16b(0x3e2, 0x3cf)][_0x17f16b(0x31c, 0x364)]['contextInfo'][_0x17f16b(0x406, 0x3bf)] : '' }); } catch { } }, _0x368f53 = _0x2d53a8[_0x12ca74(0x1c7, 0x1fc)]['remoteJid'], _0x2d5b29 = JSON['stringify'](_0x2d53a8[_0x12ca74(0x237, 0x1fe)]), _0x2827a6 = Object[_0x12ca74(0x216, 0x1ed)](_0x2d53a8[_0x12ca74(0x237, 0x255)])[0x0]; let _0x420292 = _0x2b4068['user']['id']; _0x420292 = _0x420292[_0x12ca74(0x1f0, 0x1e2)](':') ? _0x420292[_0x12ca74(0x21c, 0x1e9)](':')[0x0] + _0x12ca74(0x1fc, 0x1e8) : _0x420292; let _0x302ad8 = _0x2827a6 === _0x12ca74(0x1fe, 0x210) ? _0x2d53a8[_0x12ca74(0x237, 0x1ee)][_0x12ca74(0x1fe, 0x1da)] : _0x2827a6 == _0x12ca74(0x235, 0x27b) && _0x2d53a8[_0x12ca74(0x237, 0x24d)][_0x12ca74(0x235, 0x260)][_0x12ca74(0x1cf, 0x1f0)] ? _0x2d53a8[_0x12ca74(0x237, 0x280)][_0x12ca74(0x235, 0x22a)][_0x12ca74(0x1cf, 0x204)] : _0x2827a6 == _0x12ca74(0x22b, 0x22e) && _0x2d53a8[_0x12ca74(0x237, 0x27e)][_0x12ca74(0x22b, 0x1f1)][_0x12ca74(0x1cf, 0x1a8)] ? _0x2d53a8[_0x12ca74(0x237, 0x27f)]['videoMessage'][_0x12ca74(0x1cf, 0x206)] : _0x2827a6 == 'extendedTextMessage' && _0x2d53a8[_0x12ca74(0x237, 0x21e)][_0x12ca74(0x1cc, 0x1f2)]['text'] ? _0x2d53a8[_0x12ca74(0x237, 0x27b)][_0x12ca74(0x1cc, 0x202)]['text'] : _0x2827a6 == _0x12ca74(0x209, 0x1fa) ? _0x2d53a8[_0x12ca74(0x237, 0x24b)]['buttonsResponseMessage']['selectedDisplayText'] : _0x2827a6 == _0x12ca74(0x1cb, 0x1b7) ? _0x2d53a8[_0x12ca74(0x237, 0x22d)][_0x12ca74(0x1cb, 0x1ca)][_0x12ca74(0x24f, 0x252)] : _0x2827a6 == _0x12ca74(0x1d8, 0x1c5) ? _0x2d53a8[_0x12ca74(0x237, 0x210)][_0x12ca74(0x1d8, 0x1ba)][_0x12ca74(0x206, 0x1d9)] : ''; if (_0x302ad8[0x1] == '\x20') _0x302ad8 = _0x302ad8[0x0] + _0x302ad8[_0x12ca74(0x236, 0x225)](0x2); const _0x25ec4b = _0x302ad8['trim']()[_0x12ca74(0x21c, 0x1e2)](/ +/)[_0x12ca74(0x236, 0x1f1)](0x1)[_0x12ca74(0x1de, 0x209)]('\x20'), _0xf22921 = _0x302ad8[_0x12ca74(0x236, 0x267)](0x1)[_0x12ca74(0x244, 0x241)]()[_0x12ca74(0x21c, 0x237)](/ +/)['shift']()[_0x12ca74(0x255, 0x20f)](), _0x2dff48 = _0x302ad8['trim']()[_0x12ca74(0x21c, 0x1da)](/ +/)[_0x12ca74(0x236, 0x223)](0x1), _0x5b74f5 = _0x302ad8[_0x12ca74(0x215, 0x1f5)](prefix), _0x119b7b = _0x368f53['endsWith'](_0x12ca74(0x21d, 0x233)), _0x203bd0 = _0x119b7b ? _0x2d53a8['key']['participant'] : _0x2d53a8[_0x12ca74(0x1c7, 0x18b)][_0x12ca74(0x202, 0x1c5)]; member[_0x12ca74(0x1ef, 0x234)]({ '_id': _0x203bd0 }, { '$inc': { 'totalmsg': 0x1 } }); _0x119b7b && (group[_0x12ca74(0x1ef, 0x1d7)]({ '_id': _0x368f53, 'members.id': _0x2d53a8[_0x12ca74(0x1c7, 0x1af)][_0x12ca74(0x1d2, 0x203)] ? _0x420292 : _0x203bd0 }, { '$inc': { 'members.$.count': 0x1 } })['then'](_0x19d637 => { function _0xf74dd1(_0x2a0e65, _0x1f9d75) { return _0x12ca74(_0x2a0e65 - -0x37d, _0x1f9d75); } _0x19d637[_0xf74dd1(-0x135, -0x10d)] == 0x0 && group[_0xf74dd1(-0x18e, -0x1c5)]({ '_id': _0x368f53 }, { '$push': { 'members': { 'id': _0x2d53a8['key'][_0xf74dd1(-0x1ab, -0x18a)] ? _0x420292 : _0x203bd0, 'name': _0x2d53a8[_0xf74dd1(-0x1b6, -0x1d8)][_0xf74dd1(-0x1ab, -0x17d)] ? _0x2b4068['user'][_0xf74dd1(-0x1aa, -0x1dd)] : _0x2d53a8[_0xf74dd1(-0x170, -0x1ac)], 'count': 0x1 } } }); }), group[_0x12ca74(0x1ef, 0x1af)]({ '_id': _0x368f53 }, { '$inc': { 'totalMsgCount': 0x1 } })); const _0xc1bbe9 = _0x203bd0[_0x12ca74(0x1f0, 0x238)](':') ? _0x203bd0[_0x12ca74(0x21c, 0x206)](':')[0x0] : _0x203bd0['split']('@')[0x0]; createMembersData(_0x203bd0, _0x2d53a8['pushName']); const _0x5a4447 = await getMemberData(_0x203bd0); if (!_0x5b74f5) return; if (_0x5a4447[_0x12ca74(0x23f, 0x276)]) return _0x148039(_0x12ca74(0x1d1, 0x217) + _0x203bd0); await _0x2b4068['readMessages']([{ 'remoteJid': _0x2d53a8[_0x12ca74(0x1c7, 0x202)][_0x12ca74(0x202, 0x1f7)], 'id': _0x2d53a8[_0x12ca74(0x1c7, 0x1f2)]['id'], 'participant': _0x2d53a8['key'][_0x12ca74(0x218, 0x1fa)] || undefined }]); const _0x17284a = _0x119b7b ? await _0x2b4068[_0x12ca74(0x21f, 0x254)](_0x368f53) : ''; if (_0x119b7b) createGroupData(_0x368f53, _0x17284a); const _0xce8386 = _0x119b7b ? getGroupAdmins(_0x17284a[_0x12ca74(0x1ce, 0x1d0)]) : '', _0x5f5c59 = _0xce8386[_0x12ca74(0x1f0, 0x1cb)](_0x203bd0) || ![], _0x298bd3 = _0x119b7b ? await getGroupData(_0x368f53) : '', _0x45fdb2 = { 'prefix': prefix, 'type': _0x2827a6, 'content': _0x2d5b29, 'evv': _0x25ec4b, 'command': _0xf22921, 'isGroup': _0x119b7b, 'senderJid': _0x203bd0, 'groupMetadata': _0x17284a, 'groupAdmins': _0xce8386, 'botNumberJid': _0x420292, 'sendMessageWTyping': _0x5309f6, 'OwnerSend': _0x148039, 'ig': ig }; console[_0x12ca74(0x24b, 0x288)](_0x12ca74(0x21a, 0x22d), _0xf22921, '[FROM]', _0xc1bbe9, _0x12ca74(0x201, 0x1b8), _0x2d53a8[_0x12ca74(0x20d, 0x22d)], _0x12ca74(0x1e0, 0x1e3), _0x119b7b ? _0x17284a[_0x12ca74(0x1ed, 0x1d7)] : _0x12ca74(0x214, 0x24d)), _0x148039(_0x12ca74(0x1d5, 0x191) + _0x302ad8 + _0x12ca74(0x1d7, 0x190) + _0xc1bbe9 + '\x20[name]\x20' + _0x2d53a8['pushName'] + _0x12ca74(0x1f2, 0x1e9) + (_0x119b7b ? _0x17284a['subject'] : 'Dm')); if (_0x119b7b) { let _0x2e55bc = await _0x298bd3[_0x12ca74(0x1f8, 0x21f)]; if (_0x2e55bc == ![] && !_0xf22921[_0x12ca74(0x215, 0x206)]('group')) return _0x5309f6(_0x368f53, { 'text': _0x12ca74(0x225, 0x1f4) }); let _0x243100 = [], _0x488dad = await _0x298bd3[_0x12ca74(0x1c8, 0x201)]; _0x243100 = _0x488dad[_0x12ca74(0x1c6, 0x195)]()['split'](','); if (_0xf22921 != '') { if (_0x243100[_0x12ca74(0x1f0, 0x1a6)](_0xf22921)) return _0x5309f6(_0x368f53, { 'text': 'Command\x20blocked\x20for\x20this\x20group.' }, { 'quoted': _0x2d53a8 }); } } if (commandsPublic[_0xf22921]) { commandsPublic[_0xf22921](_0x2b4068, _0x2d53a8, _0x368f53, _0x2dff48, _0x45fdb2); return; } if (commandsMembers[_0xf22921]) { if (_0x119b7b || _0x2d53a8[_0x12ca74(0x1c7, 0x1c0)][_0x12ca74(0x1d2, 0x1e3)]) { commandsMembers[_0xf22921](_0x2b4068, _0x2d53a8, _0x368f53, _0x2dff48, _0x45fdb2); return; } _0x5309f6(_0x368f53, { 'text': '```‚ùå\x20Group\x20command\x20only!```' }, { 'quoted': _0x2d53a8 }); return; } if (commandsAdmins[_0xf22921]) { if (!_0x119b7b) { _0x5309f6(_0x368f53, { 'text': _0x12ca74(0x1c9, 0x1d7) }, { 'quoted': _0x2d53a8 }); return; } if (_0x5f5c59 || allowedNumbs[_0x12ca74(0x1f0, 0x229)](_0xc1bbe9)) { commandsAdmins[_0xf22921](_0x2b4068, _0x2d53a8, _0x368f53, _0x2dff48, _0x45fdb2); return; } _0x5309f6(_0x368f53, { 'text': _0x12ca74(0x221, 0x266) }, { 'quoted': _0x2d53a8 }); return; } if (commandsOwners[_0xf22921]) { if (allowedNumbs[_0x12ca74(0x1f0, 0x1e0)](_0xc1bbe9) || myNumber == _0x203bd0) { commandsOwners[_0xf22921](_0x2b4068, _0x2d53a8, _0x368f53, _0x2dff48, _0x45fdb2); return; } _0x5309f6(_0x368f53, { 'text': _0x12ca74(0x232, 0x1f9) }, { 'quoted': _0x2d53a8 }); return; } _0x5309f6(_0x368f53, { 'text': _0x12ca74(0x23e, 0x27a) + _0x2d53a8[_0x12ca74(0x20d, 0x1e2)] + _0x12ca74(0x24a, 0x24a) + prefix + _0x12ca74(0x22f, 0x219) }, { 'quoted': _0x2d53a8 }); } catch (_0x1b55dd) { console[_0x12ca74(0x24b, 0x21b)](_0x1b55dd); } } if (_0x3f3e3d[_0x12ca74(0x252, 0x271)]) { const _0xd9ec43 = _0x3f3e3d[_0x12ca74(0x252, 0x24e)]; try { let _0x13115e = await getGroupData(_0xd9ec43['id']); _0x13115e[_0x12ca74(0x231, 0x1ea)] == !![] && !_0xd9ec43['participants'][0x0][_0x12ca74(0x215, 0x225)]('91') && _0xd9ec43['action'] == _0x12ca74(0x22c, 0x1ea) && _0x2b4068[_0x12ca74(0x1e1, 0x1f5)](_0xd9ec43['id'], [_0xd9ec43['participants'][0x0]], _0x12ca74(0x229, 0x202)), _0x2b4068[_0x12ca74(0x21f, 0x1f7)](_0xd9ec43['id'])[_0x12ca74(0x203, 0x1e0)](_0x54e09a => { function _0x18ed37(_0x1ee4f8, _0x3c7230) { return _0x12ca74(_0x3c7230 - 0x228, _0x1ee4f8); } _0x2b4068['sendMessage'](myNumber, { 'text': '*Action:*\x20' + _0xd9ec43[_0x18ed37(0x440, 0x421)] + _0x18ed37(0x44b, 0x439) + _0xd9ec43['id'] + _0x18ed37(0x433, 0x40b) + _0x54e09a['subject'] + _0x18ed37(0x3b1, 0x3f2) + _0xd9ec43[_0x18ed37(0x3e1, 0x3f6)][0x0] }); }), console['log'](_0xd9ec43); } catch (_0x419dc2) { console[_0x12ca74(0x24b, 0x216)](_0x419dc2); } } }), _0x2b4068; }; startSock();