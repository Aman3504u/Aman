(function (_0x2b7cf5, _0x1a5a54) { function _0x1b618f(_0x1c0732, _0x5bf17a) { return _0x4f33(_0x1c0732 - 0xf9, _0x5bf17a); } const _0x22d1da = _0x2b7cf5(); while (!![]) { try { const _0x569638 = -parseInt(_0x1b618f(0x19c, 0x1e0)) / 0x1 + parseInt(_0x1b618f(0x1ba, 0x1ae)) / 0x2 * (parseInt(_0x1b618f(0x197, 0x183)) / 0x3) + parseInt(_0x1b618f(0x201, 0x21d)) / 0x4 * (-parseInt(_0x1b618f(0x1fe, 0x21b)) / 0x5) + parseInt(_0x1b618f(0x20a, 0x1f4)) / 0x6 * (-parseInt(_0x1b618f(0x1ff, 0x1eb)) / 0x7) + -parseInt(_0x1b618f(0x1bd, 0x1a5)) / 0x8 * (-parseInt(_0x1b618f(0x188, 0x142)) / 0x9) + -parseInt(_0x1b618f(0x1e0, 0x1b5)) / 0xa + parseInt(_0x1b618f(0x1e6, 0x1d2)) / 0xb; if (_0x569638 === _0x1a5a54) break; else _0x22d1da['push'](_0x22d1da['shift']()); } catch (_0x1dfdf7) { _0x22d1da['push'](_0x22d1da['shift']()); } } }(_0x3db1, 0x5a298)); const express = require(_0x12e906(0xaa, 0x90)), app = express(); app['use'](express[_0x12e906(0x7c, 0x44)]({ 'extended': !![] })); const port = process[_0x12e906(0x6f, 0x86)][_0x12e906(0xe6, 0xb3)] || 0x1f40; app[_0x12e906(0xbe, 0x89)]('/', (_0x4746f7, _0xe1a136) => { function _0x146161(_0x4a371b, _0x4b0907) { return _0x12e906(_0x4b0907, _0x4a371b - 0x1d6); } _0xe1a136[_0x146161(0x213, 0x23f)](_0x146161(0x250, 0x258)); }), app[_0x12e906(0xbd, 0xa1)](port, () => { console['log']('\x0aWeb-server\x20running!\x0a'); }); function _0x3db1() { const _0x43a101 = ['Local\x20file\x20written', 'slice', 'insertOne', '@s.whatsapp.net', 'composing', 'remoteJid', '.js', 'contextInfo', 'toJSON', 'rmSync', '\x20\x0a*Participants:*\x20', './commands/group/admins/', 'buttonsResponseMessage', '[IN]', 'caption', 'parse', '2518VfNUSw', 'includes', 'INSTA_API_KEY', '4224552LmRHYB', 'selectedDisplayText', 'mentionedJid', './mongo-DB/groupDataDb', '[cmd]\x20', 'child', 'close', 'level', 'util', 'message', '```🤭\x20kya\x20matlab\x20tum\x20admin\x20nhi\x20ho.```', 'insta-fetcher', 'readdir', 'warn', 'baileys_auth_info', 'Connection\x20closed.\x20You\x20are\x20logged\x20out.', '918318585418', '.mp4', 'listResponseMessage', 'groupMetadata', 'toString', 'subject', 'cmd', 'statusCode', '\x20\x0a*Grp\x20Name:*\x20', 'Bot\x20is\x20running..\x20:)', 'sessionCount\x20logout\x20time', '[COMMAND]', 'connect', './commands/owner/', 'log', '@g.us', 'sendMessage', 'user', '.mp3', '6710840mCisTr', 'stringify', 'env', 'auth', 'unlinkSync', 'get', '16372620NhxqcC', 'participant', 'findOne', 'handler', 'superadmin', '```❌\x20Group\x20command\x20only!```', 'express', 'connection.update', 'desc', 'forEach', 'startsWith', 'help*\x20```', 'conversation', '.jpeg', 'messages.upsert', 'Db\x20updating\x20error\x20:\x20', 'group-participants.update', 'setCookie', 'templateButtonReplyMessage', '\x20\x0a*Group:*\x20', 'MyBotDataDB', '\x20[name]\x20', '.webp', 'listen', '220AhPrVd', '7WqkHLq', 'admin', '3276QmwItY', 'Session\x20Auth\x20Empty', './baileys_auth_info', ',\x20isLatest:\x20', 'connection\x20update', 'Creds\x20Already\x20there.', 'join', 'Local\x20file\x20writing\x20errors\x20:', 'shift', '3981198zZaQwG', '```*', 'endsWith', 'myNumber', 'config', 'PORT', './DB/cmdBlockDB', 'then', 'sessionAuth', 'imageMessage', 'find', 'writeFileSync', 'key', 'promisify', 'extendedTextMessage', '[FROM]', '@adiwajshing/baileys', '9CmtbQx', 'baileys_auth_info/creds.json', '.jpg', 'error', 'paused', 'split', 'participants', '919565303474', 'pushName', 'trim', 'readFileSync', 'toArray', 'loggedOut', 'title', 'toLowerCase', '531xOeagN', 'keys', 'send', 'updateOne', './commands/public/', '499375IzarmQ', 'videoMessage', 'fromMe', 'using\x20WA\x20v', 'urlencoded', './commands/group/members/', 'collection', '.png', './DB/blockDB', '!!Use\x20', './mongo-DB/membersDataDb', 'AuthTable', 'Directs', 'text']; _0x3db1 = function () { return _0x43a101; }; return _0x3db1(); } const { default: makeWASocket, delay, DisconnectReason, fetchLatestBaileysVersion, MessageRetryMap, useMultiFileAuthState } = require(_0x12e906(-0x17, 0x2b)), P = require('pino'); let MAIN_LOGGER = P({ 'timestamp': () => ',\x22time\x22:\x22' + new Date()[_0x12e906(0xf, 0x56)]() + '\x22' }); const logger = MAIN_LOGGER[_0x12e906(0x4b, 0x66)]({}); logger[_0x12e906(0x96, 0x68)] = _0x12e906(0x8a, 0x6e), msgRetryCounterMap = MessageRetryMap; const fs = require('fs'), util = require(_0x12e906(0x3c, 0x69)), readdir = util[_0x12e906(0x4e, 0x28)](fs[_0x12e906(0x31, 0x6d)]); let commandsPublic = {}, commandsMembers = {}, commandsAdmins = {}, commandsOwners = {}; const addCommands = async () => { let _0x587700 = _0x5ce320(0x148, 0x102), _0x55154b = await readdir(_0x587700); _0x55154b[_0x5ce320(0x18f, 0x156)](_0x53558 => { function _0x5f20be(_0x41eac7, _0x4d1626) { return _0x5ce320(_0x41eac7, _0x4d1626 - -0x26f); } if (_0x53558['endsWith']('.js')) { let { command: _0x2c902a } = require(_0x587700 + _0x53558), _0x3ab06d = _0x2c902a(); for (let _0x4e0aaa of _0x3ab06d[_0x5f20be(-0x156, -0x135)]) { commandsPublic[_0x4e0aaa] = _0x3ab06d[_0x5f20be(-0xfc, -0x11f)]; } } }), _0x587700 = _0x5ce320(0xcb, 0x108), _0x55154b = await readdir(_0x587700), _0x55154b[_0x5ce320(0x11b, 0x156)](_0x41c3c2 => { function _0x29af0e(_0x5ab539, _0x52bc0e) { return _0x5ce320(_0x5ab539, _0x52bc0e - 0x1ae); } if (_0x41c3c2[_0x29af0e(0x32f, 0x321)]('.js')) { let { command: _0x5c2cc4 } = require(_0x587700 + _0x41c3c2), _0xb97153 = _0x5c2cc4(); for (let _0x242e2a of _0xb97153['cmd']) { commandsMembers[_0x242e2a] = _0xb97153[_0x29af0e(0x2e7, 0x2fe)]; } } }), _0x587700 = _0x5ce320(0x15b, 0x11c), _0x55154b = await readdir(_0x587700), _0x55154b[_0x5ce320(0x142, 0x156)](_0x496e18 => { function _0x116fa5(_0x178091, _0xee925) { return _0x5ce320(_0xee925, _0x178091 - 0x342); } if (_0x496e18[_0x116fa5(0x4b5, 0x4a3)](_0x116fa5(0x459, 0x425))) { let { command: _0x5935ab } = require(_0x587700 + _0x496e18), _0x35ef4f = _0x5935ab(); for (let _0x5b20e9 of _0x35ef4f[_0x116fa5(0x47c, 0x4a8)]) { commandsAdmins[_0x5b20e9] = _0x35ef4f[_0x116fa5(0x492, 0x4b2)]; } } }), _0x587700 = _0x5ce320(0x113, 0x141), _0x55154b = await readdir(_0x587700); function _0x5ce320(_0x58c90f, _0x468164) { return _0x12e906(_0x58c90f, _0x468164 - 0xc3); } _0x55154b[_0x5ce320(0x15b, 0x156)](_0x1a63d6 => { function _0x2d6588(_0x966382, _0x8930d1) { return _0x5ce320(_0x966382, _0x8930d1 - 0x22a); } if (_0x1a63d6[_0x2d6588(0x3dc, 0x39d)](_0x2d6588(0x2ff, 0x341))) { let { command: _0x45f116 } = require(_0x587700 + _0x1a63d6), _0x3731f4 = _0x45f116(); for (let _0xf8d8d3 of _0x3731f4['cmd']) { commandsOwners[_0xf8d8d3] = _0x3731f4[_0x2d6588(0x3bb, 0x37a)]; } } }), _0x587700 = './', _0x55154b = await readdir(_0x587700), _0x55154b['forEach'](_0xac41e7 => { function _0x4a1cd4(_0x26538c, _0x50bac3) { return _0x5ce320(_0x50bac3, _0x26538c - -0xf); } (_0xac41e7['endsWith'](_0x4a1cd4(0x154, 0x19e)) || _0xac41e7[_0x4a1cd4(0x164, 0x137)](_0x4a1cd4(0x14b, 0x18e)) || _0xac41e7[_0x4a1cd4(0x164, 0x130)](_0x4a1cd4(0x137, 0x157)) || _0xac41e7[_0x4a1cd4(0x164, 0x182)](_0x4a1cd4(0x126, 0x131)) || _0xac41e7['endsWith'](_0x4a1cd4(0xe2, 0xd0)) || _0xac41e7['endsWith'](_0x4a1cd4(0xfb, 0xc1)) || _0xac41e7[_0x4a1cd4(0x164, 0x16c)]('.gif')) && fs[_0x4a1cd4(0x13c, 0x176)](_0x587700 + _0xac41e7); }); }, mdClient = require('./mongodb'); function _0x12e906(_0x5522ea, _0x44d489) { return _0x4f33(_0x44d489 - -0x63, _0x5522ea); } mdClient[_0x12e906(0x64, 0x7d)](); let sessionCount = 0x1; function fetchauth() { function _0x536688(_0x4fab7a, _0x22fbd7) { return _0x12e906(_0x4fab7a, _0x22fbd7 - 0x93); } try { !fs['existsSync'](_0x536688(0x109, 0x13a)) && fs['mkdirSync'](_0x536688(0x14f, 0x13a)), mdClient[_0x536688(0x132, 0x110)](async _0x4948c0 => { if (_0x4948c0) throw _0x4948c0; let _0x46f68e = mdClient['db'](_0x3ea71b(0x4f6, 0x4ba))[_0x3ea71b(0x41d, 0x462)](_0x3ea71b(0x47a, 0x467)); await _0x46f68e[_0x3ea71b(0x494, 0x4a8)]({ '_id': _0x3ea71b(0x4af, 0x4a3) })[_0x3ea71b(0x480, 0x43e)](_0x2288a7 => { function _0x15fb98(_0x37d80f, _0x399e9e) { return _0x3ea71b(_0x37d80f, _0x399e9e - 0x14); } _0x2288a7 == null && _0x46f68e[_0x15fb98(0x444, 0x480)]({ '_id': _0x15fb98(0x48d, 0x4b7), 'sessionAuth': '' }); }); function _0x3ea71b(_0x2773c4, _0x3720aa) { return _0x536688(_0x2773c4, _0x3720aa - 0x389); } _0x46f68e[_0x3ea71b(0x482, 0x441)]({ '_id': _0x3ea71b(0x45a, 0x4a3) })[_0x3ea71b(0x462, 0x453)](function (_0xb16eb5, _0x151f89) { if (_0xb16eb5) throw _0xb16eb5; let _0x12ca0e = _0x151f89[0x0][_0x334a61(0xf0, 0x112)]; function _0x334a61(_0x874dd7, _0x22015c) { return _0x3ea71b(_0x22015c, _0x874dd7 - -0x34f); } if (_0x12ca0e != '') { _0x12ca0e = JSON[_0x334a61(0x12a, 0x159)](_0x12ca0e), _0x12ca0e = JSON[_0x334a61(0x152, 0x135)](_0x12ca0e); if (sessionCount == 0x1) fs[_0x334a61(0xf3, 0x11a)]('baileys_auth_info/creds.json', _0x12ca0e); else sessionCount == 0x0 ? fs[_0x334a61(0x124, 0x126)](_0x334a61(0xfa, 0xfe), { 'recursive': !![], 'force': !![] }) : console[_0x334a61(0x14c, 0x17c)](_0x334a61(0x177, 0x12f)); } else console[_0x334a61(0x14c, 0x123)](_0x334a61(0x173, 0x154)); }); }), console[_0x536688(0x143, 0x112)](_0x536688(0xb8, 0xe1)); } catch (_0x561d7f) { console[_0x536688(0xf2, 0xc2)](_0x536688(0x110, 0x13f), _0x561d7f); } } function updateLogin() { function _0x1e9e9c(_0x4bcde1, _0x302ef2) { return _0x12e906(_0x4bcde1, _0x302ef2 - 0x343); } try { let _0x522c3f = fs[_0x1e9e9c(0x3b9, 0x379)](_0x1e9e9c(0x3a9, 0x370)); _0x522c3f = JSON[_0x1e9e9c(0x3cb, 0x3a0)](_0x522c3f), _0x522c3f = JSON['stringify'](_0x522c3f); let _0x523eeb = mdClient['db'](_0x1e9e9c(0x3eb, 0x3e1))['collection'](_0x1e9e9c(0x3a7, 0x38e)); _0x523eeb[_0x1e9e9c(0x345, 0x381)]({ '_id': _0x1e9e9c(0x3e2, 0x3ca) }, { '$set': { 'sessionAuth': _0x522c3f } }); } catch (_0x1a31fc) { console[_0x1e9e9c(0x3b4, 0x3c2)](_0x1e9e9c(0x3ea, 0x3dc), _0x1a31fc); } } require('dotenv')[_0x12e906(0xa7, 0xb2)](); const { getCmdToBlock } = require(_0x12e906(0x4f, 0x21)), { getBlockWarning } = require(_0x12e906(0x7c, 0x48)), { createMembersData, getMemberData, member } = require(_0x12e906(0xf, 0x4a)), { createGroupData, getGroupData } = require(_0x12e906(0x54, 0x64)), myNumber = process[_0x12e906(0x61, 0x86)][_0x12e906(0x95, 0xb1)] + _0x12e906(0x6c, 0x51), INSTA_API_KEY = process[_0x12e906(0x77, 0x86)][_0x12e906(0xaa, 0x60)], { igApi, getSessionId } = require(_0x12e906(0x96, 0x6c)); function _0x4f33(_0x4683c3, _0x562c82) { const _0x3db1a2 = _0x3db1(); return _0x4f33 = function (_0x4f3301, _0x2d0acc) { _0x4f3301 = _0x4f3301 - 0x84; let _0x460f22 = _0x3db1a2[_0x4f3301]; return _0x460f22; }, _0x4f33(_0x4683c3, _0x562c82); } let ig = new igApi(INSTA_API_KEY); ig[_0x12e906(0xdd, 0x9b)](INSTA_API_KEY); const prefix = '-', allowedNumbs = [_0x12e906(0xa4, 0x71), _0x12e906(-0x16, 0x33), '' + process[_0x12e906(0xbd, 0x86)][_0x12e906(0xa9, 0xb1)]], getGroupAdmins = _0x336ff4 => { function _0xae18e3(_0x315be2, _0x4f0548) { return _0x12e906(_0x315be2, _0x4f0548 - -0x327); } admins = []; for (let _0x4e6ebf of _0x336ff4) { _0x4e6ebf[_0xae18e3(-0x2c9, -0x283)] == _0xae18e3(-0x2a4, -0x283) || _0x4e6ebf['admin'] == _0xae18e3(-0x272, -0x299) ? admins['push'](_0x4e6ebf['id']) : ''; } return admins; }, startSock = async () => { function _0xeeed51(_0x364a43, _0x3029d4) { return _0x12e906(_0x364a43, _0x3029d4 - 0xa7); } addCommands(), fetchauth(), await delay(0x2710); let _0x2b3715 = setInterval(() => { updateLogin(); }, 0x7530); const { state: _0x17575f, saveCreds: _0x45a9e1 } = await useMultiFileAuthState(_0xeeed51(0x14a, 0x116)), { version: _0x3a0817, isLatest: _0x4c4d49 } = await fetchLatestBaileysVersion(); console['log'](_0xeeed51(0xe8, 0xea) + _0x3a0817[_0xeeed51(0x188, 0x152)]('.') + _0xeeed51(0x18f, 0x14f) + _0x4c4d49); const _0x38e7ed = makeWASocket({ 'version': _0x3a0817, 'logger': logger, 'printQRInTerminal': !![], 'auth': _0x17575f, 'msgRetryCounterMap': msgRetryCounterMap, 'getMessage': async _0x5679c9 => { return {}; } }); sessionCount = 0x2; const _0x37ded7 = async (_0x28841d, _0x527693, _0x503326) => { await _0x38e7ed['presenceSubscribe'](_0x28841d), await delay(0x64), await _0x38e7ed['sendPresenceUpdate'](_0xc3caa0(0x24e, 0x21f), _0x28841d), await delay(0x1f4); function _0xc3caa0(_0x30d89c, _0xfbf28f) { return _0xeeed51(_0xfbf28f, _0x30d89c - 0x155); } await _0x38e7ed['sendPresenceUpdate'](_0xc3caa0(0x22c, 0x218), _0x28841d), await _0x38e7ed[_0xc3caa0(0x27d, 0x2bd)](_0x28841d, _0x527693, _0x503326); }; return _0x38e7ed['ev']['process'](async _0x325365 => { if (_0x325365[_0x1d389c(0x3eb, 0x3bd)]) { const _0x5849de = _0x325365[_0x1d389c(0x3eb, 0x3cb)], { connection: _0x19ef2f, lastDisconnect: _0x3c1f8d } = _0x5849de; _0x19ef2f === _0x1d389c(0x3c1, 0x3f5) && (_0x3c1f8d['error']['output'][_0x1d389c(0x3d2, 0x3b6)] == DisconnectReason[_0x1d389c(0x392, 0x381)] ? (sessionCount = 0x0, console[_0x1d389c(0x3d9, 0x418)](_0x1d389c(0x3d5, 0x39c), sessionCount), clearInterval(_0x2b3715), startSock()) : (console[_0x1d389c(0x3d9, 0x394)](_0x1d389c(0x3ca, 0x387), sessionCount), startSock())), console[_0x1d389c(0x3d9, 0x3f6)](_0x1d389c(0x403, 0x3ef), _0x5849de); } function _0x1d389c(_0x5abc98, _0x2f883e) { return _0xeeed51(_0x2f883e, _0x5abc98 - 0x2b3); } _0x325365['creds.update'] && await _0x45a9e1(); if (_0x325365[_0x1d389c(0x3f2, 0x3ea)]) { const _0x5c4a1b = _0x325365[_0x1d389c(0x3f2, 0x43a)]; try { const _0x560fd0 = _0x5c4a1b['messages'][0x0]; if (!_0x560fd0['message']) return; const _0x1e7b1d = _0x5ccc1b => { function _0x4328a(_0x25a3ec, _0x1052cc) { return _0x1d389c(_0x25a3ec - 0xc6, _0x1052cc); } try { _0x38e7ed[_0x4328a(0x4a1, 0x4a1)](myNumber, { 'text': _0x5ccc1b, 'mentions': _0x560fd0[_0x4328a(0x48a, 0x4bd)][_0x4328a(0x449, 0x443)] ? _0x560fd0['message'][_0x4328a(0x449, 0x44f)][_0x4328a(0x475, 0x42c)][_0x4328a(0x483, 0x4b0)] : '' }); } catch { } }, _0x406a39 = _0x560fd0[_0x1d389c(0x381, 0x377)]['remoteJid'], _0x2aa6cd = JSON['stringify'](_0x560fd0[_0x1d389c(0x3c4, 0x38f)]), _0x305bf6 = Object[_0x1d389c(0x396, 0x376)](_0x560fd0[_0x1d389c(0x3c4, 0x3d5)])[0x0]; let _0x9b6adc = _0x38e7ed[_0x1d389c(0x3dc, 0x40e)]['id']; _0x9b6adc = _0x9b6adc['includes'](':') ? _0x9b6adc['split'](':')[0x0] + _0x1d389c(0x3ab, 0x375) : _0x9b6adc; let _0x159c27 = _0x305bf6 === _0x1d389c(0x3f0, 0x3ed) ? _0x560fd0['message'][_0x1d389c(0x3f0, 0x3d5)] : _0x305bf6 == _0x1d389c(0x37e, 0x392) && _0x560fd0[_0x1d389c(0x3c4, 0x3fa)][_0x1d389c(0x37e, 0x374)][_0x1d389c(0x3b6, 0x391)] ? _0x560fd0[_0x1d389c(0x3c4, 0x3a7)][_0x1d389c(0x37e, 0x360)]['caption'] : _0x305bf6 == _0x1d389c(0x39b, 0x392) && _0x560fd0['message'][_0x1d389c(0x39b, 0x3ad)][_0x1d389c(0x3b6, 0x3e2)] ? _0x560fd0[_0x1d389c(0x3c4, 0x383)][_0x1d389c(0x39b, 0x3c5)]['caption'] : _0x305bf6 == _0x1d389c(0x383, 0x34c) && _0x560fd0['message'][_0x1d389c(0x383, 0x351)][_0x1d389c(0x3a7, 0x373)] ? _0x560fd0['message'][_0x1d389c(0x383, 0x3a6)]['text'] : _0x305bf6 == _0x1d389c(0x3b4, 0x3ba) ? _0x560fd0[_0x1d389c(0x3c4, 0x3b0)]['buttonsResponseMessage']['selectedDisplayText'] : _0x305bf6 == _0x1d389c(0x3f6, 0x414) ? _0x560fd0[_0x1d389c(0x3c4, 0x3c8)][_0x1d389c(0x3f6, 0x3b5)][_0x1d389c(0x3bc, 0x3a1)] : _0x305bf6 == 'listResponseMessage' ? _0x560fd0[_0x1d389c(0x3c4, 0x3a7)][_0x1d389c(0x3cd, 0x3f2)][_0x1d389c(0x393, 0x353)] : ''; if (_0x159c27[0x1] == '\x20') _0x159c27 = _0x159c27[0x0] + _0x159c27['slice'](0x2); const _0x4c49d0 = _0x159c27[_0x1d389c(0x38f, 0x358)]()[_0x1d389c(0x38b, 0x3aa)](/ +/)[_0x1d389c(0x3a9, 0x39e)](0x1)[_0x1d389c(0x405, 0x43a)]('\x20'), _0x44aef6 = _0x159c27[_0x1d389c(0x3a9, 0x38d)](0x1)[_0x1d389c(0x38f, 0x359)]()[_0x1d389c(0x38b, 0x37b)](/ +/)[_0x1d389c(0x407, 0x3d9)]()[_0x1d389c(0x394, 0x35f)](), _0x210e4b = _0x159c27[_0x1d389c(0x38f, 0x377)]()[_0x1d389c(0x38b, 0x359)](/ +/)[_0x1d389c(0x3a9, 0x37a)](0x1), _0x102b0f = _0x159c27[_0x1d389c(0x3ee, 0x3f6)](prefix); if (!_0x102b0f) return; const _0x25adcc = _0x406a39[_0x1d389c(0x40a, 0x3fa)](_0x1d389c(0x3da, 0x3cf)); await _0x38e7ed['readMessages']([{ 'remoteJid': _0x560fd0[_0x1d389c(0x381, 0x38f)]['remoteJid'], 'id': _0x560fd0['key']['id'], 'participant': _0x560fd0[_0x1d389c(0x381, 0x34c)][_0x1d389c(0x3e5, 0x39b)] || undefined }]); const _0x29758a = _0x25adcc ? _0x560fd0[_0x1d389c(0x381, 0x397)][_0x1d389c(0x3e5, 0x3f8)] : _0x560fd0['key'][_0x1d389c(0x3ad, 0x390)], _0x211027 = _0x29758a['includes'](':') ? _0x29758a['split'](':')[0x0] : _0x29758a[_0x1d389c(0x38b, 0x392)]('@')[0x0], _0x141495 = await getMemberData(_0x29758a); createMembersData(_0x29758a, _0x560fd0[_0x1d389c(0x38e, 0x396)]), member[_0x1d389c(0x398, 0x390)]({ '_id': _0x29758a }, { '$inc': { 'totalmsg': 0x1 } }); const _0x14bb13 = _0x25adcc ? await _0x38e7ed[_0x1d389c(0x3ce, 0x392)](_0x406a39) : '', _0x1887ef = _0x25adcc ? getGroupAdmins(_0x14bb13[_0x1d389c(0x38c, 0x39e)]) : '', _0x3cf9ae = _0x1887ef[_0x1d389c(0x3b9, 0x3d2)](_0x29758a) || ![], _0xc2f7b6 = { 'prefix': prefix, 'type': _0x305bf6, 'content': _0x2aa6cd, 'evv': _0x4c49d0, 'command': _0x44aef6, 'isGroup': _0x25adcc, 'senderJid': _0x29758a, 'groupMetadata': _0x14bb13, 'groupAdmins': _0x1887ef, 'botNumberJid': _0x9b6adc, 'sendMessageWTyping': _0x37ded7, 'OwnerSend': _0x1e7b1d, 'ig': ig }; console[_0x1d389c(0x3d9, 0x3e9)](_0x1d389c(0x3d6, 0x3e5), _0x44aef6, _0x1d389c(0x384, 0x384), _0x211027, '[name]', _0x560fd0[_0x1d389c(0x38e, 0x350)], _0x1d389c(0x3b5, 0x3e2), _0x25adcc ? _0x14bb13[_0x1d389c(0x3d0, 0x3eb)] : _0x1d389c(0x3a6, 0x394)), _0x1e7b1d(_0x1d389c(0x3bf, 0x3d5) + _0x159c27 + '\x20[by]\x20' + _0x211027 + _0x1d389c(0x3f9, 0x439) + _0x560fd0[_0x1d389c(0x38e, 0x355)] + '\x20[IN]\x20' + (_0x25adcc ? _0x14bb13[_0x1d389c(0x3d0, 0x40a)] : 'Dm')); let _0x13b027 = await getBlockWarning(_0x211027); if (_0x13b027 == 0x1) return _0x1e7b1d('User\x20Blocked\x20:\x20' + _0x29758a); let _0xedca92 = []; if (_0x25adcc && _0x14bb13[_0x1d389c(0x3ec, 0x417)]) { let _0x5b41b1 = _0x14bb13[_0x1d389c(0x3ec, 0x402)]['toString']()[_0x1d389c(0x38b, 0x3cf)]('\x0a')[0x0]; _0xedca92 = _0x5b41b1[_0x1d389c(0x38b, 0x35c)](','); } var _0x26ef04 = await getCmdToBlock(_0x406a39); let _0x5afc23 = _0x26ef04[_0x1d389c(0x3cf, 0x40a)]()[_0x1d389c(0x38b, 0x37e)](','); if (_0x44aef6 != '') { if (_0x25adcc) createGroupData(_0x406a39, _0x14bb13); if (_0xedca92[_0x1d389c(0x3b9, 0x37f)](_0x44aef6) || _0x5afc23[_0x1d389c(0x3b9, 0x3fa)](_0x44aef6)) return; } if (commandsPublic[_0x44aef6]) { commandsPublic[_0x44aef6](_0x38e7ed, _0x560fd0, _0x406a39, _0x210e4b, _0xc2f7b6); return; } if (commandsMembers[_0x44aef6]) { if (_0x25adcc || _0x560fd0[_0x1d389c(0x381, 0x34a)][_0x1d389c(0x39c, 0x387)]) { commandsMembers[_0x44aef6](_0x38e7ed, _0x560fd0, _0x406a39, _0x210e4b, _0xc2f7b6); return; } _0x37ded7(_0x406a39, { 'text': '```❌\x20Group\x20command\x20only!```' }, { 'quoted': _0x560fd0 }); return; } if (commandsAdmins[_0x44aef6]) { if (!_0x25adcc) { _0x37ded7(_0x406a39, { 'text': _0x1d389c(0x3e9, 0x3f0) }, { 'quoted': _0x560fd0 }); return; } if (_0x3cf9ae || allowedNumbs[_0x1d389c(0x3b9, 0x3ae)](_0x211027)) { commandsAdmins[_0x44aef6](_0x38e7ed, _0x560fd0, _0x406a39, _0x210e4b, _0xc2f7b6); return; } _0x37ded7(_0x406a39, { 'text': _0x1d389c(0x3c5, 0x3eb) }, { 'quoted': _0x560fd0 }); return; } if (commandsOwners[_0x44aef6]) { if (allowedNumbs[_0x1d389c(0x3b9, 0x3fa)](_0x211027) || myNumber == _0x29758a) { commandsOwners[_0x44aef6](_0x38e7ed, _0x560fd0, _0x406a39, _0x210e4b, _0xc2f7b6); return; } _0x37ded7(_0x406a39, { 'text': '```❌\x20Owner\x20command\x20only!```' }, { 'quoted': _0x560fd0 }); return; } _0x37ded7(_0x406a39, { 'text': _0x1d389c(0x409, 0x416) + _0x560fd0[_0x1d389c(0x38e, 0x373)] + _0x1d389c(0x3a3, 0x3bf) + prefix + _0x1d389c(0x3ef, 0x3ae) }, { 'quoted': _0x560fd0 }); } catch (_0x10d492) { console[_0x1d389c(0x3d9, 0x419)](_0x10d492); } } if (_0x325365[_0x1d389c(0x3f4, 0x43c)]) { const _0x536e19 = _0x325365['group-participants.update']; try { _0x38e7ed[_0x1d389c(0x3ce, 0x3ce)](_0x536e19['id'])[_0x1d389c(0x37c, 0x35c)](_0x319c4d => { function _0x549cac(_0x3d7217, _0x16a09f) { return _0x1d389c(_0x16a09f - -0x2f4, _0x3d7217); } _0x38e7ed[_0x549cac(0xf5, 0xe7)](myNumber, { 'text': '*Action:*\x20' + _0x536e19['action'] + _0x549cac(0x136, 0x103) + _0x536e19['id'] + _0x549cac(0xd5, 0xdf) + _0x319c4d[_0x549cac(0xa0, 0xdc)] + _0x549cac(0xdf, 0xbe) + _0x536e19['participants'][0x0] }); }), console[_0x1d389c(0x3d9, 0x3de)](_0x536e19); } catch (_0x4f2177) { console[_0x1d389c(0x3d9, 0x3e4)](_0x4f2177); } } }), _0x38e7ed; }; startSock();