(function (_0x7b8ced, _0x3b3902) { function _0x425b9f(_0x41b98b, _0x1a10f4) { return _0xab8f(_0x1a10f4 - -0x20d, _0x41b98b); } const _0x11391b = _0x7b8ced(); while (!![]) { try { const _0x420d64 = parseInt(_0x425b9f(-0x11b, -0x112)) / 0x1 + parseInt(_0x425b9f(-0x171, -0x130)) / 0x2 * (parseInt(_0x425b9f(-0x1a1, -0x15a)) / 0x3) + parseInt(_0x425b9f(-0x120, -0x12a)) / 0x4 * (parseInt(_0x425b9f(-0x14c, -0x17e)) / 0x5) + parseInt(_0x425b9f(-0xe0, -0x10a)) / 0x6 + -parseInt(_0x425b9f(-0x16d, -0x174)) / 0x7 + parseInt(_0x425b9f(-0x17f, -0x170)) / 0x8 * (parseInt(_0x425b9f(-0x140, -0x173)) / 0x9) + -parseInt(_0x425b9f(-0x146, -0x127)) / 0xa * (parseInt(_0x425b9f(-0x153, -0x18d)) / 0xb); if (_0x420d64 === _0x3b3902) break; else _0x11391b['push'](_0x11391b['shift']()); } catch (_0x57a361) { _0x11391b['push'](_0x11391b['shift']()); } } }(_0x4533, 0x1b065)); const express = require(_0x5cd8c4(0x1ad, 0x1d7)), app = express(); app[_0x5cd8c4(0x194, 0x1bb)](express['urlencoded']({ 'extended': !![] })); const port = process[_0x5cd8c4(0x1d1, 0x1dd)][_0x5cd8c4(0x1cb, 0x1b2)] || 0x1f40; app[_0x5cd8c4(0x1bc, 0x184)]('/', (_0x306c7a, _0x41c95a) => { function _0x5e455f(_0x19ef2a, _0xd21c80) { return _0x5cd8c4(_0x19ef2a, _0xd21c80 - -0x114); } _0x41c95a[_0x5e455f(0x7e, 0x8b)](_0x5e455f(0x7b, 0x79)); }); function _0x5cd8c4(_0x32dfc9, _0x404131) { return _0xab8f(_0x404131 - 0xe0, _0x32dfc9); } app[_0x5cd8c4(0x1a1, 0x197)](port, () => { function _0x306171(_0x216ff8, _0x54084b) { return _0x5cd8c4(_0x216ff8, _0x54084b - -0x4b4); } console['log'](_0x306171(-0x2f5, -0x2cb)); }); const { default: makeWASocket, delay, DisconnectReason, fetchLatestBaileysVersion, MessageRetryMap, useMultiFileAuthState } = require(_0x5cd8c4(0x184, 0x1ba)), P = require(_0x5cd8c4(0x19a, 0x1d0)); let MAIN_LOGGER = P({ 'timestamp': () => _0x5cd8c4(0x16c, 0x1af) + new Date()[_0x5cd8c4(0x143, 0x165)]() + '\x22' }); const logger = MAIN_LOGGER['child']({}); logger['level'] = 'warn', msgRetryCounterMap = MessageRetryMap; const fs = require('fs'), util = require(_0x5cd8c4(0x1ea, 0x1c7)), readdir = util[_0x5cd8c4(0x1ab, 0x1b3)](fs['readdir']); let commandsPublic = {}, commandsMembers = {}, commandsAdmins = {}, commandsOwners = {}; const addCommands = async () => { let _0x5e2af3 = './commands/public/', _0x596c56 = await readdir(_0x5e2af3); _0x596c56[_0x2a5778(0x2e0, 0x2e6)](_0x4f4ba => { function _0x31c871(_0x10446f, _0x20467b) { return _0x2a5778(_0x10446f - -0x39c, _0x20467b); } if (_0x4f4ba[_0x31c871(-0xb2, -0xa9)](_0x31c871(-0xcf, -0x103))) { let { command: _0x5a5dbd } = require(_0x5e2af3 + _0x4f4ba), _0x8b35b1 = _0x5a5dbd(); for (let _0x5718f8 of _0x8b35b1[_0x31c871(-0x120, -0x140)]) { commandsPublic[_0x5718f8] = _0x8b35b1[_0x31c871(-0xba, -0xbf)]; } } }), _0x5e2af3 = _0x2a5778(0x2aa, 0x2d5), _0x596c56 = await readdir(_0x5e2af3), _0x596c56[_0x2a5778(0x2e0, 0x2d9)](_0x54392a => { function _0x132f51(_0x2e3dc8, _0xaf5a26) { return _0x2a5778(_0xaf5a26 - -0x11c, _0x2e3dc8); } if (_0x54392a[_0x132f51(0x1b3, 0x1ce)](_0x132f51(0x1cc, 0x1b1))) { let { command: _0x2e3a53 } = require(_0x5e2af3 + _0x54392a), _0x3c4f8c = _0x2e3a53(); for (let _0x383af4 of _0x3c4f8c[_0x132f51(0x159, 0x160)]) { commandsMembers[_0x383af4] = _0x3c4f8c['handler']; } } }), _0x5e2af3 = _0x2a5778(0x284, 0x27a), _0x596c56 = await readdir(_0x5e2af3), _0x596c56['forEach'](_0x19e46f => { function _0x41cd0a(_0x128be6, _0x518e3e) { return _0x2a5778(_0x518e3e - -0x403, _0x128be6); } if (_0x19e46f[_0x41cd0a(-0x13d, -0x119)](_0x41cd0a(-0x146, -0x136))) { let { command: _0x42d962 } = require(_0x5e2af3 + _0x19e46f), _0x54fdfa = _0x42d962(); for (let _0x20f4d4 of _0x54fdfa[_0x41cd0a(-0x176, -0x187)]) { commandsAdmins[_0x20f4d4] = _0x54fdfa[_0x41cd0a(-0xdb, -0x121)]; } } }), _0x5e2af3 = _0x2a5778(0x2ec, 0x2cb), _0x596c56 = await readdir(_0x5e2af3); function _0x2a5778(_0x1cef35, _0x2869e4) { return _0x5cd8c4(_0x2869e4, _0x1cef35 - 0x114); } _0x596c56[_0x2a5778(0x2e0, 0x317)](_0x2148eb => { function _0x79cc7b(_0x5d320b, _0x126929) { return _0x2a5778(_0x126929 - -0x5e, _0x5d320b); } if (_0x2148eb['endsWith'](_0x79cc7b(0x27d, 0x26f))) { let { command: _0x19f8aa } = require(_0x5e2af3 + _0x2148eb), _0x1405f5 = _0x19f8aa(); for (let _0x3bfcb5 of _0x1405f5[_0x79cc7b(0x25a, 0x21e)]) { commandsOwners[_0x3bfcb5] = _0x1405f5[_0x79cc7b(0x281, 0x284)]; } } }), _0x5e2af3 = './', _0x596c56 = await readdir(_0x5e2af3), _0x596c56[_0x2a5778(0x2e0, 0x2c2)](_0xba76c2 => { function _0xe21e8(_0x4721ed, _0x654cfa) { return _0x2a5778(_0x4721ed - 0xa6, _0x654cfa); } (_0xba76c2['endsWith'](_0xe21e8(0x394, 0x36b)) || _0xba76c2[_0xe21e8(0x390, 0x372)](_0xe21e8(0x31d, 0x345)) || _0xba76c2[_0xe21e8(0x390, 0x390)](_0xe21e8(0x33f, 0x379)) || _0xba76c2[_0xe21e8(0x390, 0x361)](_0xe21e8(0x37a, 0x37f)) || _0xba76c2[_0xe21e8(0x390, 0x3b2)](_0xe21e8(0x339, 0x323)) || _0xba76c2[_0xe21e8(0x390, 0x389)](_0xe21e8(0x382, 0x3c9)) || _0xba76c2[_0xe21e8(0x390, 0x3bc)](_0xe21e8(0x33d, 0x36b))) && fs['unlinkSync'](_0x5e2af3 + _0xba76c2); }); }, mdClient = require(_0x5cd8c4(0x1f4, 0x1dc)); mdClient['connect'](); let sessionCount = 0x1; function fetchauth() { function _0x3582e8(_0xbacfd6, _0x5d388b) { return _0x5cd8c4(_0x5d388b, _0xbacfd6 - -0x2d8); } try { !fs[_0x3582e8(-0xf2, -0xc7)](_0x3582e8(-0x120, -0xff)) && fs['mkdirSync'](_0x3582e8(-0x120, -0xf7)), mdClient[_0x3582e8(-0x166, -0x152)](async _0x399fd8 => { if (_0x399fd8) throw _0x399fd8; function _0x4bc8a3(_0x11e049, _0x151753) { return _0x3582e8(_0x151753 - 0x25e, _0x11e049); } let _0x35232c = mdClient['db'](_0x4bc8a3(0x119, 0x13d))[_0x4bc8a3(0x186, 0x15f)](_0x4bc8a3(0x10e, 0x11b)); await _0x35232c[_0x4bc8a3(0x13f, 0x102)]({ '_id': _0x4bc8a3(0x149, 0x170) })['then'](_0x236ccd => { function _0x3d2914(_0x1cb124, _0x2c78ac) { return _0x4bc8a3(_0x1cb124, _0x2c78ac - 0x1); } _0x236ccd == null && _0x35232c[_0x3d2914(0x126, 0x124)]({ '_id': _0x3d2914(0x1b2, 0x171), 'sessionAuth': '' }); }), _0x35232c['find']({ '_id': 'auth' })[_0x4bc8a3(0x100, 0x112)](function (_0x3815ff, _0x45638a) { if (_0x3815ff) throw _0x3815ff; let _0x16f31a = _0x45638a[0x0][_0x495ee7(-0x2e6, -0x2f7)]; function _0x495ee7(_0x32d41a, _0x47dc22) { return _0x4bc8a3(_0x47dc22, _0x32d41a - -0x44a); } if (_0x16f31a != '') { _0x16f31a = JSON['parse'](_0x16f31a), _0x16f31a = JSON[_0x495ee7(-0x358, -0x33f)](_0x16f31a); if (sessionCount == 0x1) fs[_0x495ee7(-0x330, -0x366)](_0x495ee7(-0x319, -0x31f), _0x16f31a); else sessionCount == 0x0 ? fs[_0x495ee7(-0x2f9, -0x324)](_0x495ee7(-0x319, -0x2dd), { 'recursive': !![], 'force': !![] }) : console[_0x495ee7(-0x34e, -0x386)](_0x495ee7(-0x305, -0x32f)); } else console[_0x495ee7(-0x34e, -0x335)](_0x495ee7(-0x2e0, -0x321)); }); }), console[_0x3582e8(-0x162, -0x1a6)](_0x3582e8(-0x14e, -0x13c)); } catch (_0x13052e) { console[_0x3582e8(-0x133, -0x119)](_0x3582e8(-0x171, -0x177), _0x13052e); } } function updateLogin() { function _0x4953e8(_0x173b8e, _0x23e6b1) { return _0x5cd8c4(_0x23e6b1, _0x173b8e - 0xfd); } try { let _0x551d62 = fs[_0x4953e8(0x274, 0x272)](_0x4953e8(0x2a8, 0x2e9)); _0x551d62 = JSON['parse'](_0x551d62), _0x551d62 = JSON[_0x4953e8(0x269, 0x25f)](_0x551d62); let _0x3271b4 = mdClient['db'](_0x4953e8(0x2b4, 0x2a5))[_0x4953e8(0x2d6, 0x2e2)](_0x4953e8(0x292, 0x2da)); _0x3271b4[_0x4953e8(0x267, 0x252)]({ '_id': 'auth' }, { '$set': { 'sessionAuth': _0x551d62 } }); } catch (_0x5d618d) { console[_0x4953e8(0x273, 0x271)](_0x4953e8(0x2bb, 0x2f6), _0x5d618d); } } require(_0x5cd8c4(0x1b4, 0x1b6))[_0x5cd8c4(0x1ce, 0x18b)](); const { createMembersData, getMemberData, member } = require('./mongo-DB/membersDataDb'), { createGroupData, getGroupData, group } = require(_0x5cd8c4(0x1cd, 0x199)), myNumber = process['env'][_0x5cd8c4(0x1ab, 0x175)] + _0x5cd8c4(0x18c, 0x1a9), INSTA_API_KEY = process[_0x5cd8c4(0x200, 0x1dd)][_0x5cd8c4(0x18e, 0x16e)], { igApi, getSessionId } = require('insta-fetcher'); function _0xab8f(_0x5eb190, _0x1efea5) { const _0x45334f = _0x4533(); return _0xab8f = function (_0xab8f9b, _0x318ed7) { _0xab8f9b = _0xab8f9b - 0x7c; let _0x1efeb6 = _0x45334f[_0xab8f9b]; return _0x1efeb6; }, _0xab8f(_0x5eb190, _0x1efea5); } let ig = new igApi(INSTA_API_KEY); ig[_0x5cd8c4(0x19e, 0x190)](INSTA_API_KEY); const prefix = '' + process[_0x5cd8c4(0x1d4, 0x1dd)]['PREFIX'], allowedNumbs = [_0x5cd8c4(0x16e, 0x189), '919565303474', '' + process[_0x5cd8c4(0x1c8, 0x1dd)]['myNumber']], getGroupAdmins = _0x402baa => { admins = []; for (let _0x252e35 of _0x402baa) { _0x252e35['admin'] == _0x29d52e(-0x1d5, -0x1b3) || _0x252e35[_0x29d52e(-0x1d9, -0x1b3)] == _0x29d52e(-0x240, -0x212) ? admins[_0x29d52e(-0x1e6, -0x223)](_0x252e35['id']) : ''; } function _0x29d52e(_0x13e7c2, _0x2cbc50) { return _0x5cd8c4(_0x13e7c2, _0x2cbc50 - -0x385); } return admins; }, startSock = async () => { addCommands(), fetchauth(), await delay(0x2710); let _0x479dbd = setInterval(() => { updateLogin(); }, 0x7530); const { state: _0x446b94, saveCreds: _0x41c31f } = await useMultiFileAuthState('baileys_auth_info'), { version: _0x242216, isLatest: _0x2c4dc1 } = await fetchLatestBaileysVersion(); console['log'](_0x48a424(0x464, 0x44c) + _0x242216['join']('.') + ',\x20isLatest:\x20' + _0x2c4dc1); function _0x48a424(_0x26b714, _0x4ee92e) { return _0x5cd8c4(_0x4ee92e, _0x26b714 - 0x2b4); } const _0x361a80 = makeWASocket({ 'version': _0x242216, 'logger': logger, 'printQRInTerminal': !![], 'auth': _0x446b94, 'msgRetryCounterMap': msgRetryCounterMap, 'getMessage': async _0x59c249 => { return {}; } }); sessionCount = 0x2; const _0x2290dd = async (_0x712ba4, _0x47fa46, _0x3cb720) => { await _0x361a80[_0x2bf59c(0x28e, 0x290)](_0x712ba4), await delay(0x64), await _0x361a80[_0x2bf59c(0x27d, 0x289)](_0x2bf59c(0x267, 0x29b), _0x712ba4), await delay(0x1f4), await _0x361a80[_0x2bf59c(0x251, 0x289)](_0x2bf59c(0x2e3, 0x29c), _0x712ba4); function _0x2bf59c(_0x2415b7, _0x5c2aa7) { return _0x48a424(_0x5c2aa7 - -0x1c6, _0x2415b7); } await _0x361a80[_0x2bf59c(0x2ee, 0x2cf)](_0x712ba4, _0x47fa46, _0x3cb720); }; return _0x361a80['ev'][_0x48a424(0x49b, 0x4a6)](async _0x547d5d => { if (_0x547d5d[_0x5ebe6a(0x2a7, 0x2c4)]) { const _0xcf7af4 = _0x547d5d[_0x5ebe6a(0x2a7, 0x2b0)], { connection: _0x3c6922, lastDisconnect: _0x5da556 } = _0xcf7af4; _0x3c6922 === 'close' && (_0x5da556[_0x5ebe6a(0x2eb, 0x2e0)][_0x5ebe6a(0x2b7, 0x2b2)][_0x5ebe6a(0x32e, 0x35c)] == DisconnectReason[_0x5ebe6a(0x2fa, 0x314)] ? (sessionCount = 0x0, console[_0x5ebe6a(0x2bc, 0x28b)](_0x5ebe6a(0x2ce, 0x2bf), sessionCount), clearInterval(_0x479dbd), startSock()) : (console[_0x5ebe6a(0x2bc, 0x27b)](_0x5ebe6a(0x2d5, 0x2e2), sessionCount), startSock())), console[_0x5ebe6a(0x2bc, 0x2f6)](_0x5ebe6a(0x2b1, 0x2bb), _0xcf7af4); } _0x547d5d['creds.update'] && await _0x41c31f(); function _0x5ebe6a(_0x45ecd7, _0x457195) { return _0x48a424(_0x45ecd7 - -0x16e, _0x457195); } if (_0x547d5d[_0x5ebe6a(0x2de, 0x2bc)]) { const _0x1720a9 = _0x547d5d[_0x5ebe6a(0x2de, 0x29c)]; try { const _0xaba616 = _0x1720a9[_0x5ebe6a(0x31a, 0x319)][0x0]; if (!_0xaba616[_0x5ebe6a(0x2f7, 0x320)]) return; const _0x321bd4 = _0x1709f6 => { function _0x467cbd(_0x5df08e, _0xa1550) { return _0x5ebe6a(_0xa1550 - -0x5f6, _0x5df08e); } try { _0x361a80[_0x467cbd(-0x2cc, -0x2cf)](myNumber, { 'text': _0x1709f6, 'mentions': _0xaba616[_0x467cbd(-0x311, -0x2ff)][_0x467cbd(-0x2c7, -0x2ef)] ? _0xaba616[_0x467cbd(-0x331, -0x2ff)][_0x467cbd(-0x2be, -0x2ef)]['contextInfo'][_0x467cbd(-0x309, -0x2db)] : '' }); } catch { } }, _0x95f57d = _0xaba616[_0x5ebe6a(0x326, 0x2f7)]['remoteJid'], _0x45d6dc = JSON[_0x5ebe6a(0x2b2, 0x297)](_0xaba616[_0x5ebe6a(0x2f7, 0x2c7)]), _0xaf927f = Object['keys'](_0xaba616['message'])[0x0]; let _0x260828 = _0x361a80[_0x5ebe6a(0x2e0, 0x2f6)]['id']; _0x260828 = _0x260828['includes'](':') ? _0x260828[_0x5ebe6a(0x2c4, 0x2b8)](':')[0x0] + '@s.whatsapp.net' : _0x260828; let _0x2298b8 = _0xaf927f === 'conversation' ? _0xaba616[_0x5ebe6a(0x2f7, 0x32c)][_0x5ebe6a(0x302, 0x2dd)] : _0xaf927f == 'imageMessage' && _0xaba616[_0x5ebe6a(0x2f7, 0x332)]['imageMessage'][_0x5ebe6a(0x2c1, 0x2bc)] ? _0xaba616[_0x5ebe6a(0x2f7, 0x33a)][_0x5ebe6a(0x2ec, 0x31a)][_0x5ebe6a(0x2c1, 0x2c5)] : _0xaf927f == _0x5ebe6a(0x315, 0x2fc) && _0xaba616[_0x5ebe6a(0x2f7, 0x2f5)]['videoMessage'][_0x5ebe6a(0x2c1, 0x2ac)] ? _0xaba616[_0x5ebe6a(0x2f7, 0x330)][_0x5ebe6a(0x315, 0x2e5)][_0x5ebe6a(0x2c1, 0x2de)] : _0xaf927f == _0x5ebe6a(0x307, 0x2c2) && _0xaba616[_0x5ebe6a(0x2f7, 0x2d2)][_0x5ebe6a(0x307, 0x31f)][_0x5ebe6a(0x2a3, 0x29c)] ? _0xaba616['message'][_0x5ebe6a(0x307, 0x2e3)][_0x5ebe6a(0x2a3, 0x28f)] : _0xaf927f == 'buttonsResponseMessage' ? _0xaba616['message'][_0x5ebe6a(0x2c8, 0x2d6)][_0x5ebe6a(0x2a5, 0x2a2)] : _0xaf927f == _0x5ebe6a(0x2fb, 0x2c1) ? _0xaba616['message'][_0x5ebe6a(0x2fb, 0x2db)][_0x5ebe6a(0x2a5, 0x2d3)] : _0xaf927f == 'listResponseMessage' ? _0xaba616[_0x5ebe6a(0x2f7, 0x303)]['listResponseMessage']['title'] : ''; if (_0x2298b8[0x1] == '\x20') _0x2298b8 = _0x2298b8[0x0] + _0x2298b8[_0x5ebe6a(0x2d7, 0x2b4)](0x2); const _0x33dd1c = _0x2298b8[_0x5ebe6a(0x2e4, 0x320)]()[_0x5ebe6a(0x2c4, 0x280)](/ +/)[_0x5ebe6a(0x2d7, 0x2f6)](0x1)[_0x5ebe6a(0x319, 0x358)]('\x20'), _0x401270 = _0x2298b8[_0x5ebe6a(0x2d7, 0x29c)](0x1)[_0x5ebe6a(0x2e4, 0x30d)]()[_0x5ebe6a(0x2c4, 0x2d5)](/ +/)['shift']()[_0x5ebe6a(0x2cc, 0x295)](), _0x3ece47 = _0x2298b8[_0x5ebe6a(0x2e4, 0x2b9)]()[_0x5ebe6a(0x2c4, 0x2ac)](/ +/)[_0x5ebe6a(0x2d7, 0x295)](0x1), _0x382318 = _0x2298b8[_0x5ebe6a(0x317, 0x315)](prefix), _0x16a943 = _0x95f57d[_0x5ebe6a(0x31c, 0x2fc)](_0x5ebe6a(0x313, 0x331)), _0x40ba30 = _0x16a943 ? _0xaba616[_0x5ebe6a(0x326, 0x336)]['participant'] : _0xaba616[_0x5ebe6a(0x326, 0x35f)][_0x5ebe6a(0x2f2, 0x2fe)], _0x13ed08 = _0x40ba30[_0x5ebe6a(0x2ba, 0x28c)](':') ? _0x40ba30[_0x5ebe6a(0x2c4, 0x309)](':')[0x0] : _0x40ba30[_0x5ebe6a(0x2c4, 0x2e8)]('@')[0x0]; createMembersData(_0x40ba30, _0xaba616['pushName']); const _0x454b2a = await getMemberData(_0x40ba30); if (_0x454b2a[_0x5ebe6a(0x2f0, 0x2ac)]) return _0x321bd4(_0x5ebe6a(0x2e9, 0x2c7) + _0x40ba30); member[_0x5ebe6a(0x2b0, 0x2f5)]({ '_id': _0x40ba30 }, { '$inc': { 'totalmsg': 0x1 } }); if (_0x16a943) group['updateOne']({ '_id': _0x95f57d }, { '$inc': { 'totalMsgCount': 0x1 } }); if (!_0x382318) return; await _0x361a80[_0x5ebe6a(0x2a2, 0x2bb)]([{ 'remoteJid': _0xaba616[_0x5ebe6a(0x326, 0x365)][_0x5ebe6a(0x2f2, 0x317)], 'id': _0xaba616[_0x5ebe6a(0x326, 0x367)]['id'], 'participant': _0xaba616[_0x5ebe6a(0x326, 0x332)]['participant'] || undefined }]); const _0x3bc8d1 = _0x16a943 ? await getGroupData(_0x95f57d) : '', _0x50f9bb = _0x16a943 ? await _0x361a80['groupMetadata'](_0x95f57d) : ''; if (_0x16a943) createGroupData(_0x95f57d, _0x50f9bb); const _0x231470 = _0x16a943 ? getGroupAdmins(_0x50f9bb[_0x5ebe6a(0x325, 0x368)]) : '', _0x5eec9d = _0x231470[_0x5ebe6a(0x2ba, 0x2fc)](_0x40ba30) || ![], _0x453207 = { 'prefix': prefix, 'type': _0xaf927f, 'content': _0x45d6dc, 'evv': _0x33dd1c, 'command': _0x401270, 'isGroup': _0x16a943, 'senderJid': _0x40ba30, 'groupMetadata': _0x50f9bb, 'groupAdmins': _0x231470, 'botNumberJid': _0x260828, 'sendMessageWTyping': _0x2290dd, 'OwnerSend': _0x321bd4, 'ig': ig }; console['log'](_0x5ebe6a(0x32b, 0x348), _0x401270, _0x5ebe6a(0x2c6, 0x2ed), _0x13ed08, _0x5ebe6a(0x2be, 0x2cb), _0xaba616[_0x5ebe6a(0x2aa, 0x2d1)], _0x5ebe6a(0x2ea, 0x2f9), _0x16a943 ? _0x50f9bb[_0x5ebe6a(0x2c7, 0x2ed)] : _0x5ebe6a(0x308, 0x2db)), _0x321bd4(_0x5ebe6a(0x2cd, 0x2a4) + _0x2298b8 + _0x5ebe6a(0x310, 0x2cc) + _0x13ed08 + '\x20[name]\x20' + _0xaba616[_0x5ebe6a(0x2aa, 0x2a8)] + _0x5ebe6a(0x2d8, 0x29d) + (_0x16a943 ? _0x50f9bb[_0x5ebe6a(0x2c7, 0x30b)] : 'Dm')); if (_0x16a943) { let _0x2f9488 = await _0x3bc8d1[_0x5ebe6a(0x2ac, 0x282)]; if (_0x2f9488 == ![]) return _0x2290dd(_0x95f57d, { 'text': _0x5ebe6a(0x2d4, 0x2ba) }); let _0x566582 = [], _0x38d4c9 = await _0x3bc8d1[_0x5ebe6a(0x2e7, 0x2b5)]; _0x566582 = _0x38d4c9[_0x5ebe6a(0x2ed, 0x31d)]()[_0x5ebe6a(0x2c4, 0x282)](','); if (_0x401270 != '') { if (_0x566582[_0x5ebe6a(0x2ba, 0x2b0)](_0x401270)) return _0x2290dd(_0x95f57d, { 'text': 'Command\x20Blocked\x20For\x20this\x20group.' }, { 'quoted': _0xaba616 }); } } if (commandsPublic[_0x401270]) { commandsPublic[_0x401270](_0x361a80, _0xaba616, _0x95f57d, _0x3ece47, _0x453207); return; } if (commandsMembers[_0x401270]) { if (_0x16a943 || _0xaba616['key'][_0x5ebe6a(0x30f, 0x2e8)]) { commandsMembers[_0x401270](_0x361a80, _0xaba616, _0x95f57d, _0x3ece47, _0x453207); return; } _0x2290dd(_0x95f57d, { 'text': _0x5ebe6a(0x2e2, 0x2ed) }, { 'quoted': _0xaba616 }); return; } if (commandsAdmins[_0x401270]) { if (!_0x16a943) { _0x2290dd(_0x95f57d, { 'text': _0x5ebe6a(0x2e2, 0x31a) }, { 'quoted': _0xaba616 }); return; } if (_0x5eec9d || allowedNumbs[_0x5ebe6a(0x2ba, 0x286)](_0x13ed08)) { commandsAdmins[_0x401270](_0x361a80, _0xaba616, _0x95f57d, _0x3ece47, _0x453207); return; } _0x2290dd(_0x95f57d, { 'text': _0x5ebe6a(0x2af, 0x2bc) }, { 'quoted': _0xaba616 }); return; } if (commandsOwners[_0x401270]) { if (allowedNumbs[_0x5ebe6a(0x2ba, 0x2ca)](_0x13ed08) || myNumber == _0x40ba30) { commandsOwners[_0x401270](_0x361a80, _0xaba616, _0x95f57d, _0x3ece47, _0x453207); return; } _0x2290dd(_0x95f57d, { 'text': '```🤭\x20kya\x20matlab\x20tum\x20mere\x20owner\x20nhi\x20ho.```' }, { 'quoted': _0xaba616 }); return; } _0x2290dd(_0x95f57d, { 'text': '```*' + _0xaba616['pushName'] + _0x5ebe6a(0x2a4, 0x289) + prefix + _0x5ebe6a(0x30b, 0x316) }, { 'quoted': _0xaba616 }); } catch (_0x1683cb) { console[_0x5ebe6a(0x2bc, 0x27d)](_0x1683cb); } } if (_0x547d5d['group-participants.update']) { const _0x4a00e3 = _0x547d5d['group-participants.update']; try { _0x361a80[_0x5ebe6a(0x328, 0x304)](_0x4a00e3['id'])['then'](_0x2c4ffc => { function _0x509daf(_0x2a912a, _0x329f11) { return _0x5ebe6a(_0x329f11 - -0x4e8, _0x2a912a); } _0x361a80[_0x509daf(-0x1df, -0x1c1)](myNumber, { 'text': _0x509daf(-0x1ff, -0x202) + _0x4a00e3[_0x509daf(-0x1ef, -0x1de)] + _0x509daf(-0x26b, -0x235) + _0x4a00e3['id'] + '\x20\x0a*Grp\x20Name:*\x20' + _0x2c4ffc[_0x509daf(-0x258, -0x221)] + _0x509daf(-0x1d6, -0x1fa) + _0x4a00e3[_0x509daf(-0x17c, -0x1c3)][0x0] }); }), console[_0x5ebe6a(0x2bc, 0x2ee)](_0x4a00e3); } catch (_0x3dd794) { console[_0x5ebe6a(0x2bc, 0x296)](_0x3dd794); } } }), _0x361a80; }; function _0x4533() { const _0x1d4685 = ['presenceSubscribe', 'User\x20Blocked\x20:\x20', '[IN]', 'error', 'imageMessage', 'toString', '\x20\x0a*Participants:*\x20', '@s.whatsapp.net', 'isBlock', 'baileys_auth_info/creds.json', 'remoteJid', 'composing', 'paused', ',\x22time\x22:\x22', 'using\x20WA\x20v', 'message', 'PORT', 'promisify', 'loggedOut', 'templateButtonReplyMessage', 'dotenv', 'MyBotDataDB', './baileys_auth_info', '.js', '@adiwajshing/baileys', 'use', 'conversation', '142vaRlqU', 'Db\x20updating\x20error\x20:\x20', 'Creds\x20Already\x20there.', '.mp4', 'extendedTextMessage', 'Directs', '4lyBiXS', 'action', 'help*\x20```', '320LZfFWl', 'util', '.png', 'fromMe', '\x20[by]\x20', 'rmSync', 'forEach', '@g.us', 'handler', 'videoMessage', 'pino', 'startsWith', 'admin', 'join', 'messages', 'mentionedJid', 'endsWith', 'express', './commands/owner/', 'collection', '.webp', '147173mxccEG', './mongodb', 'env', 'sessionAuth', 'participants', 'key', 'sendMessage', 'groupMetadata', '179586iAbAtM', 'Session\x20Auth\x20Empty', '[COMMAND]', 'existsSync', 'process', 'statusCode', '\x0aWeb-server\x20running!\x0a', 'auth', 'readMessages', 'text', '!!Use\x20', 'selectedDisplayText', '26774pnNkQl', 'connection.update', 'push', '.jpeg', 'pushName', 'toJSON', 'isBotOn', 'Local\x20file\x20writing\x20errors\x20:', 'cmd', '```🤭\x20kya\x20matlab\x20tum\x20admin\x20nhi\x20ho.```', 'updateOne', 'connection\x20update', 'stringify', '\x20\x0a*Group:*\x20', 'INSTA_API_KEY', '428605PcDqMN', './commands/group/admins/', 'output', 'connect', 'superadmin', 'includes', 'myNumber', 'log', 'readFileSync', '[name]', '1229368KyPLKg', '310482vxVNQF', 'caption', 'findOne', '8ZfhoqM', 'split', '.jpg', '[FROM]', 'subject', 'buttonsResponseMessage', '.gif', 'get', '.mp3', 'toLowerCase', '[cmd]\x20', 'sessionCount\x20logout\x20time', '918318585418', 'Local\x20file\x20written', 'config', 'toArray', 'Bot\x20is\x20running..\x20:)', '```Bot\x20is\x20Not\x20active\x20in\x20this\x20group.\x0aAsk\x20the\x20Owner\x20to\x20activate\x20in\x20this\x20group.```', 'Connection\x20closed.\x20You\x20are\x20logged\x20out.', 'setCookie', 'slice', '\x20[IN]\x20', '2826KtnsPt', 'writeFileSync', 'AuthTable', './commands/group/members/', 'listen', 'messages.upsert', './mongo-DB/groupDataDb', 'user', 'sendPresenceUpdate', '```❌\x20Group\x20command\x20only!```', 'insertOne', 'trim', 'send', '*Action:*\x20', 'cmdBlocked']; _0x4533 = function () { return _0x1d4685; }; return _0x4533(); } startSock();